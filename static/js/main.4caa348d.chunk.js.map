{"version":3,"sources":["n1-main/m2-bll/redux/pack-reducer.ts","n1-main/m3-dal/Api.tsx","n1-main/m2-bll/redux/app-reducer.ts","n1-main/m2-bll/redux/auth-reducer.ts","n1-main/m1-ui/Pages/LoginPage.tsx","n1-main/m1-ui/Pages/ProfilePage.tsx","n1-main/m1-ui/Pages/NotFoundPage.tsx","n1-main/m1-ui/common/icons/LoadingIcon.tsx","n1-main/m1-ui/common/c7-Progress/Loading.tsx","n1-main/m1-ui/Pages/RestorePassPage.tsx","n1-main/m1-ui/Pages/NewPassPage.tsx","n1-main/m1-ui/common/icons/MessageIcon.tsx","n1-main/m1-ui/Pages/RestorePassCheckEmailPage.tsx","n1-main/m1-ui/Pages/Pack/RangeSlider.tsx","n1-main/m1-ui/Pages/Pack/RangeButtons.tsx","n1-main/m1-ui/Pages/Pack/RangeShowCard.tsx","n1-main/m1-ui/common/c8-Table/DeckTableHeader.tsx","n1-main/m1-ui/common/c9-Modal/ModalForm.tsx","n1-main/m1-ui/common/c8-Table/DeckTable.tsx","n1-main/m1-ui/Pages/Pack/Search.tsx","n1-main/m1-ui/Pages/Pack/Packs.tsx","n1-main/m1-ui/Pages/SignupPage.tsx","n1-main/m2-bll/redux/card-reducer.ts","n1-main/m1-ui/Pages/Cards/CardTableHeader.tsx","n1-main/m1-ui/Pages/Cards/CardTable.tsx","n1-main/m1-ui/Pages/Cards/SearchCard.tsx","n1-main/m1-ui/Pages/Cards/CardPage.tsx","n1-main/m1-ui/Routes.tsx","n1-main/m1-ui/Header/Header.tsx","n1-main/m1-ui/ErrorSnackbar/ErrorSnackbar.tsx","n1-main/App.tsx","reportWebVitals.ts","n1-main/m2-bll/redux/store.ts","n1-main/m1-ui/common/theme.ts","index.tsx"],"names":["ACTIONS_TYPE","instance","axios","create","baseURL","withCredentials","acsessAPI","email","password","rememberMe","post","delete","from","message","resetPasswordToken","pack","queryPackObject","get","id","params","packUpdateObject","put","queryCardsObject","initState","errorMessage","appStatus","error","setMessageErrorAC","type","setAppStatusAC","value","setAppErrorAC","isLoggedIn","isFetching","isPassRequestSent","isPassChanged","_id","name","avatar","publicCardPacksCount","created","update","isAdmin","verified","loggedInAC","signupAC","setPassRequestAC","profileAC","authMeTC","dispatch","then","res","data","catch","rej","response","console","log","useStyles","makeStyles","theme","createStyles","root","textAlign","padding","width","formTitle","marginBottom","formSubtitle","formDescription","formButtonBlock","margin","display","alignItems","displayStretch","textFieldArea","LoginPage","classes","useDispatch","useSelector","state","auth","isLoggedError","restoreSchema","Yup","shape","required","formik","useFormik","initialValues","remember","validationSchema","onSubmit","values","resetForm","useHistory","to","Grid","container","justify","style","minHeight","item","Card","className","handleSubmit","Typography","variant","color","FormControl","FormGroup","TextField","label","getFieldProps","touched","errors","align","FormControlLabel","control","Checkbox","Button","onClick","formLinkTitle","marginTop","Link","component","NavLink","PATH","SIGNUP","ProfilePage","userProfile","useEffect","xs","src","ALL_ROUTES","NotFoundPage","LoadingIcon","size","xmlns","height","viewBox","fill","d","maxWidth","loadingTitle","loadingMessage","Loading","props","justifyContent","paddingTop","paddingBottom","RestorePassPage","app","success","status","request","RESTORE_PASS_CHECK_EMAIL","LOGIN","errorBlock","NewPassPage","useState","showPassword","setShowPassword","token","useParams","min","matches","Input","placeholder","endAdornment","InputAdornment","position","IconButton","onMouseDown","edge","Visibility","VisibilityOff","MessageIcon","x1","x2","y1","y2","gradientUnits","offset","stopColor","stopOpacity","opacity","cx","cy","rx","ry","transform","formIcon","initialPackState","cardPacks","packName","max","isSortTypeAscending","sortField","user_id","page","pageCount","cardPacksTotalCount","setUserIdAC","SET_PACK_USER_ID","payload","setCardsPackAC","SET_CARDS_PACK","setPageCountAC","SET_PACK_PAGE_COUNT","setPageAC","SET_PACK_PAGE","setPackNameAC","SET_PACK_NAME","getAllPack","getState","sortPacks","getPackQueryObject","length","SET_PACK_TOTAL_COUNT","valuetext","RangeSlider","React","setValue","setTO","setTimeout","SET_PACK_MIN","clearTimeout","SET_PACK_MAX","Slider","onChange","event","newValue","valueLabelDisplay","getAriaValueText","flexGrow","privateModeHeader","privateModeBlock","modeButton","borderRadius","paper","sliderCaption","RangeButtons","hint","setHint","ButtonGroup","RangeShowCard","gutterBottom","headCells","numeric","disablePadding","spacing","table","minWidth","visuallyHidden","border","clip","overflow","top","DeckTableHeader","onRequestSort","numSelected","rowCount","TableHead","TableRow","map","headCell","TableCell","sortDirection","TableSortLabel","active","direction","property","ModalForm","openStatus","handleCloseModal","modalActionCallback","modalTitle","modalText","actionButtonTitle","children","handleClose","Dialog","open","onClose","DialogTitle","DialogContent","DialogContentText","DialogActions","autoFocus","tableRow","backgroundColor","palette","action","hover","DeckTable","selected","setPackName","modalDeleteStatus","setModalDeleteStatus","modalEditStatus","setModalEditStatus","handleDeletePack","deckId","packId","handleEditDeck","updateObjectFileds","updatePackQueryObject","cardsPack","handlePackNameChange","target","Paper","TableContainer","Table","SET_PACK_SORT_TYPE","TableBody","deck","index","labelId","role","tabIndex","scope","CARDS","slice","cardsCount","moment","updated","format","user_name","fullWidth","alert","TablePagination","rowsPerPageOptions","count","rowsPerPage","onPageChange","newPage","onRowsPerPageChange","parseInt","rootGrid","search","searchInputBlock","addDeckBlock","marginLeft","Search","setSearch","modalAddStatus","setModalAddStatus","handleAddPAck","addNewPackObject","newPackObject","onKeyUp","key","filterBlock","mainBlock","boxSizing","mainSearchBlock","mainSearchHeader","mainTableBlock","Pack","elevation","square","resetButton","flex","marginRight","submitButton","SignupPage","cfPassword","validate","test","initialCardState","cards","packUserId","cardsTotalCount","minGrade","maxGrade","SET_PAGE_COUNT","SET_PAGE","setCardsArrayAC","SET_CARDS_ARRAY","getAllCardsTS","searchFields","sortCards","card","cardsQueryObject","cardsPack_id","SET_CARDS_TOTAL_COUNT","setCardsTotalCountAC","SET_MIN_GRADE","setMinGradeAC","SET_MAX_GRADE","setMaxGradeAC","CardTableHeader","CardTable","SET_SORT_ASC","SET_SORT_FIELD","question","answer","grade","SearchCard","SetModalCardStatus","cardQuestion","CardPage","history","packObjectFromState","find","getObjectName","push","PACK","ArrowBackIos","PROFILE","NOTFOUND","RESTORE_PASS","NEW_PASS","TEST_PAGE","Routes","path","exact","render","RestorePassCheckEmailPage","listBlock","flexDirection","iconBlock","menuItem","Header","AppBar","Toolbar","itemMenu","Menu","LinearProgress","Alert","ErrorSnackbar","reason","isOpen","Snackbar","autoHideDuration","severity","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","reducers","combineReducers","store","createStore","applyMiddleware","thunkMiddleware","muiTheme","createTheme","overrides","MuiCssBaseline","body","background","backgroundRepeat","backgroundAttachment","MuiButton","fontSize","fontFamily","fontWeight","fontStyle","lineHeight","textTransform","MuiCard","MuiLink","MuiTextField","MuiInput","typography","h1","h2","h3","body1","join","primary","light","main","dark","secondary","warning","info","text","ReactDOM","StrictMode","CssBaseline","document","getElementById"],"mappings":"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","file":"static/js/main.4caa348d.chunk.js","sourcesContent":["import {\n    acsessAPI,\n    GetPackQueryParamsType,\n    GetPackResponseWithDateType, NewPackFieldsType, NewPackObjectDataType,\n    PackDataType,\n    PackResponseDataType, PackUpdateFieldsType, PackUpdateObjectType\n} from \"../../m3-dal/Api\";\nimport {setAppErrorAC, setAppStatusAC, setMessageErrorAC} from \"./app-reducer\";\nimport {AnyAction, Dispatch} from \"redux\";\nimport {ThunkDispatch} from \"redux-thunk\";\nimport {AppStoreType} from \"./store\";\n\n\nexport enum ACTIONS_TYPE {\n    SET_CARDS_PACK = 'PackReducer/SET_CARDS_PACK',\n    SET_PACK_NAME = 'PackReducer/SET_PACK_NAME',\n    SET_PACK_MIN = 'PackReducer/SET_PACK_MIN',\n    SET_PACK_MAX = 'PackReducer/SET_PACK_MAX',\n    SET_PACK_PAGE = 'PackReducer/SET_PACK_PAGE',\n    SET_PACK_PAGE_COUNT = 'PackReducer/SET_PACK_PAGE_COUNT',\n    SET_PACK_TOTAL_COUNT = 'PackReducer/SET_PACK_TOTAL_COUNT',\n    SET_PACK_USER_ID = 'PackReducer/SET_PACK_USER_ID',\n    SET_PACK_SORT_TYPE = 'PackReducer/SET_PACK_SORT_TYPE',\n    SET_PACK_SORT_FIELD = 'PackReducer/SET_PACK_SORT_FIELD',\n    ADD_NEW_PACK = 'PackReducer/ADD_NEW_PACK',\n    GET_PACKS = 'PackReducer/GET_PACKS',\n}\n\nexport interface InitialPackStateType {\n    cardPacks: Array<PackResponseDataType>,\n    /*Query params*/\n    packName: string | null\n    // minCardsCount\n    min: number | null\n    // maxCardsCount\n    max: number | null\n    // sort params\n    //sortPacks: string\n    isSortTypeAscending: boolean\n    sortField: keyof PackDataType | null\n    page: number\n    pageCount: number\n    user_id: string | null\n    /* getting from server */\n    cardPacksTotalCount: number\n    /*minCardsCount: number | null\n    maxCardsCount: number | null*/\n}\n\nconst initialPackState: InitialPackStateType = {\n    cardPacks: [],\n    packName: null,\n    // minCardsCount, maxCardsCount\n    min: null,\n    max: null,\n    isSortTypeAscending: false,\n    sortField: \"updated\",\n    user_id: null,\n    // current page\n    page: 0,\n    // packs per page\n    pageCount: 5,\n    // packs total count\n    cardPacksTotalCount: 0,\n}\n\n\nexport const packReducer = (state: InitialPackStateType = initialPackState, action: CombinedActionType): InitialPackStateType => {\n    /*console.log('action type', action.type)*/\n    /*console.log('action payload', action.payload)*/\n    switch (action.type) {\n        case ACTIONS_TYPE.SET_CARDS_PACK:\n            /*debugger*/\n            return {\n                ...state,\n                cardPacks: [],\n                ...action.payload,\n            }\n        case ACTIONS_TYPE.SET_PACK_NAME:\n        case ACTIONS_TYPE.SET_PACK_MAX:\n        case ACTIONS_TYPE.SET_PACK_MIN:\n        case ACTIONS_TYPE.SET_PACK_PAGE:\n        case ACTIONS_TYPE.SET_PACK_PAGE_COUNT:\n        case ACTIONS_TYPE.SET_PACK_USER_ID:\n        case ACTIONS_TYPE.SET_PACK_SORT_TYPE:\n        case ACTIONS_TYPE.SET_PACK_TOTAL_COUNT:\n            return {\n                ...state,\n                ...action.payload,\n            }\n        default:\n            return state;\n    }\n};\n\nexport const setUserIdAC = (user_id: string) => ({\n    type: ACTIONS_TYPE.SET_PACK_USER_ID,\n    payload: {\n        user_id\n    }\n})\n\nexport const setPackSortType = (isSortTypeAscending: boolean, sortField: keyof PackDataType) => ({\n    type: ACTIONS_TYPE.SET_PACK_SORT_TYPE,\n    payload: {\n        isSortTypeAscending, sortField\n    }\n})\n\nexport const setCardsPackTotalCountAC = (cardPacksTotalCount: number) => ({\n    type: ACTIONS_TYPE.SET_PACK_TOTAL_COUNT,\n    payload: {\n        cardPacksTotalCount\n    }\n})\n\nexport const setCardsPackAC = (cardPacks: Array<PackResponseDataType>) => ({\n    type: ACTIONS_TYPE.SET_CARDS_PACK,\n    payload: {\n        cardPacks\n    }\n} as const)\n\nexport const setPageCountAC = (pageCount: number) => ({\n    type: ACTIONS_TYPE.SET_PACK_PAGE_COUNT,\n    payload: {\n        pageCount\n    }\n})\n\nexport const setPageAC = (page: number) => ({\n    type: ACTIONS_TYPE.SET_PACK_PAGE,\n    payload: {\n        page\n    }\n})\nexport const setMaxCardsCountAC = (max: number) => ({\n    type: ACTIONS_TYPE.SET_PACK_MAX,\n    payload: {\n        max\n    }\n})\nexport const setMinCardsCountAC = (min: number) => ({\n    type: ACTIONS_TYPE.SET_PACK_MIN,\n    payload: {\n        min\n    }\n})\nexport const setPackNameAC = (packName: string | null) => ({\n    type: ACTIONS_TYPE.SET_PACK_NAME,\n    payload: {\n        packName\n    }\n})\n\nexport type CombinedActionType =\n    SetPackNameActionType | SetMinCardsCountType |\n    SetMaxCardsCountType | SetUserIdType |\n    SetPageCountType | SetPageType | SetCardsPackType |\n    SetPackSortType\n\n\nexport type SetPackNameActionType = ReturnType<typeof setPackNameAC>\nexport type SetMinCardsCountType = ReturnType<typeof setMinCardsCountAC>\nexport type SetMaxCardsCountType = ReturnType<typeof setMaxCardsCountAC>\n\nexport type SetUserIdType = ReturnType<typeof setUserIdAC>\nexport type SetPageCountType = ReturnType<typeof setPageCountAC>\nexport type SetPageType = ReturnType<typeof setPageAC>\nexport type SetCardsPackType = ReturnType<typeof setCardsPackAC>\nexport type setCardsPackTotalCountType = ReturnType<typeof setCardsPackTotalCountAC>\n\nexport type SetPackSortType = ReturnType<typeof setPackSortType>\n/*export type SETPackSortFieldType = ReturnType<typeof SETPackSortFieldType>*/\n\nexport const getAllPack = () => {\n    return (dispatch: ThunkDispatch<AppStoreType, {}, AnyAction>, getState: () => AppStoreType) => {\n        dispatch(setAppStatusAC('loading'))\n        let {\n            packName, page, pageCount,\n            min, max, user_id, sortField,\n            isSortTypeAscending,\n        } = getState().pack;\n        let sortPacks\n        // if sortField set create sortPacks field '0created' '1updated'\n        if (sortField) {\n            sortPacks = +isSortTypeAscending + sortField;\n        }\n        // create GET query params object from state\n        const getPackQueryObject: GetPackQueryParamsType = {\n            params: {\n                ...(packName !== null && {packName}),\n                ...(min !== null && {min}),\n                ...(max !== null && {max}),\n                ...(page && {page: page}),\n                ...(pageCount && {pageCount}),\n                ...(user_id !== null && {user_id}),\n                ...(sortPacks && {sortPacks: sortPacks}),\n            }\n        }\n        acsessAPI.getCardPacks(getPackQueryObject)\n            .then(res => {\n                if (res.data && res.data.cardPacks.length > 0) {\n                    dispatch(setCardsPackAC(res.data.cardPacks))\n                } else {\n                    dispatch(setCardsPackAC([]))\n                }\n                /*dispatch(setMaxCardsCountAC(res.data.maxCardsCount))\n                dispatch(setMinCardsCountAC(res.data.minCardsCount))*/\n                dispatch(setPageAC(res.data.page))\n                dispatch(setPageCountAC(res.data.pageCount))\n                dispatch(setCardsPackTotalCountAC(res.data.cardPacksTotalCount))\n                dispatch(setAppStatusAC('succeeded'))\n            })\n            .catch(error => {\n                dispatch(setAppStatusAC('failed'))\n                dispatch(setMessageErrorAC('Something went wrong'))\n            })\n    }\n}\n\nexport const deletePackByIdTC = (packId: string) => {\n    return (dispatch: ThunkDispatch<AppStoreType, {}, AnyAction>, getState: () => AppStoreType) => {\n        dispatch(setAppStatusAC('loading'))\n        acsessAPI.deleteCardsPacks(packId)\n            .then(res => {\n                dispatch(setAppStatusAC('succeeded'))\n                dispatch(getAllPack())\n            })\n            .catch(error => {\n                dispatch(setAppErrorAC(error.message))\n                dispatch(setAppStatusAC('failed'))\n            })\n    }\n}\n\nexport const addNewPackTC = (addNewPackObject: NewPackFieldsType) => {\n    return (dispatch: ThunkDispatch<AppStoreType, {}, AnyAction>, getState: () => AppStoreType) => {\n        dispatch(setAppStatusAC('loading'))\n        const newPackObject: NewPackObjectDataType = {\n            cardsPack: {\n                ...addNewPackObject\n            }\n        }\n        acsessAPI.postCardPacks(newPackObject)\n            .then(res => {\n                dispatch(setAppStatusAC('succeeded'))\n                dispatch(getAllPack())\n            })\n            .catch(error => {\n                dispatch(setAppErrorAC(error.message))\n                dispatch(setAppStatusAC('failed'))\n            })\n    }\n}\n\nexport const updateCardPack = (packId: string, packUpdateObject: PackUpdateFieldsType) => {\n    return (dispatch: ThunkDispatch<AppStoreType, {}, AnyAction>) => {\n        const updatePackQueryObject = {\n            cardsPack: {\n                _id : packId,\n                ...packUpdateObject\n            }\n        }\n        dispatch(setAppStatusAC('loading'))\n        acsessAPI.updateCardPacks(updatePackQueryObject)\n            .then(res => {\n                dispatch(setAppStatusAC('succeeded'))\n                dispatch(getAllPack())\n            })\n            .catch(error => {\n                dispatch(setAppErrorAC(error.message))\n                dispatch(setAppStatusAC('failed'))\n            })\n    }\n}","import axios from 'axios'\n\nconst settings = {\n    withCredentials: true\n};\nconst instance = axios.create({\n    /*baseURL: 'http://localhost:7542/2.0/',*/\n    baseURL: 'https://neko-back.herokuapp.com/2.0/',\n    ...settings\n})\n\n// Types for delete card object\n\nexport interface DeleteCardResponseType {\n    deletedCard: UpdateCardType\n    token: string\n    tokenDeathTime: number\n}\n\n// Types for post card object\nexport interface PostCardResponseType {\n    newCard: CardType\n    token: string\n    tokenDeathTime: number\n}\n\n// Types for Update Card Request\nexport interface UpdateCardType extends CardType {\n    answerImg: string\n    answerVideo: string\n    questionImg: string\n    questionVideo: string\n}\n\n// Types for Update Card Request\nexport interface UpdateCardResponseType {\n    updatedCard: UpdateCardType\n    token: string\n    tokenDeathTime: number\n}\n\n// Types for Update card request\n\n// Update Card Fields\nexport interface UpdateCardFieldsType {\n    _id?: string\n    question?: string\n    answer?: string\n    comments?: string\n    grade?: number\n    shots?: number\n    type?: string\n    /*more_id? : \"6101043d9906843f45c0f27f\",*/\n    __v?: 0,\n    answerImg?: string\n    answerVideo?: string\n    questionImg?: string\n    questionVideo?: string\n}\n\nexport interface UpdateCardQueryType {\n    card: UpdateCardFieldsType\n}\n\n// Types for post card object\n\nexport interface PostCardFieldsType {\n    cardsPack_id?: string\n    question?: string\n    answer?: string\n    grade?: 0 | 1 | 3 | 4 | 5\n    shots?: number\n    rating?: number\n    answerImg?: string\n    questionImg?: string\n    questionVideo?: string\n    answerVideo?: string\n    type?: string\n}\n\nexport interface PostCardQueryType {\n    card: PostCardFieldsType\n}\n\n// Get Card Query Fields\nexport interface GetCardQueryFields {\n    cardsPack_id?: string\n    cardAnswer?: string | null\n    cardQuestion?: string | null\n    min?: number | null\n    max?: number | null\n    sortCards?: string | null\n    page?: number | null\n    pageCount?: number | null\n}\n\n// Types for Get Card Query\nexport interface GetCardQueryType {\n    params: GetCardQueryFields\n}\n\n// Types for Get Card Query\nexport interface CardType {\n    _id: string\n    cardsPack_id: string\n    user_id: string\n    answer: string\n    question: string\n    grade: number\n    shots: number\n    comments: string\n    type: string\n    rating: number\n    more_id: string\n    created: string\n    updated: string\n    __v: number\n}\n\n// Types for Get Card Query\nexport interface GetCardResponseType {\n    cards: Array<CardType>\n    packUserId: string\n    page: number\n    pageCount: number\n    cardsTotalCount: number\n    minGrade: number\n    maxGrade: number\n    token: string\n    tokenDeathTime: number\n}\n\nexport type UserProfileType = {\n    _id: string;\n    email: string,\n    name: string,\n    avatar?: string,\n    publicCardPacksCount: number,\n    created: string,\n    update: string,\n    isAdmin: boolean,\n    verified: boolean,\n    rememberMe: boolean,\n    error: string\n}\n\nexport type UserLoginType = {\n    _id: string;\n    email: string,\n    name: string,\n    avatar?: string,\n    publicCardPacksCount: number\n}\n\ntype registrationUserType = {\n    addedUser: {}\n    error?: string\n}\n\nexport type UserForgotPassType = {\n    info: string\n    success: boolean\n    answer: boolean\n    html: boolean\n}\nexport type UserNewPasswordType = {\n    info: string\n}\n\nexport interface PackResponseDataType {\n    _id: string\n    user_id: string\n    user_name: string\n    private: boolean\n    name: string\n    path: string\n    grade: number\n    shots: number\n    cardsCount: number\n    type: string\n    rating: number\n    created: string\n    updated: string\n    more_id: string\n    __v: number\n}\n\nexport interface PackDataType extends Omit<PackResponseDataType, 'created' | 'updated'> {\n    created: Date\n    updated: Date\n}\n\nexport interface GetPackResponseType {\n    cardPacks: Array<PackResponseDataType>\n    page: number\n    pageCount: number\n    cardPacksTotalCount: number\n    minCardsCount: number\n    maxCardsCount: number\n    token: string\n    tokenDeathTime: number\n}\n\nexport interface GetPackResponseWithDateType extends Omit<GetPackResponseType, 'cardPacks'> {\n    cardPacks: Array<PackDataType>\n}\n\nexport interface DeletePackResponseType {\n    deletedCardsPack: PackResponseDataType\n    token: string\n    tokenDeathTime: number\n}\n\nexport type NewPackResponseType = {\n    newCardsPack: PackResponseDataType,\n    token: string\n    tokenDeathTime: number\n}\n\nexport interface PackUpdateResponseDataType extends PackResponseDataType {\n    deckCover: string\n}\n\nexport interface UpdatePackResponseType {\n    updatedCardsPack: PackUpdateResponseDataType,\n    token: string\n    tokenDeathTime: number\n}\n\nexport interface NewPackFieldsType {\n    name?: string\n    path?: string\n    grade?: number\n    shots?: number\n    rating?: number\n    deckCover?: string\n    privateDeck?: boolean\n    type?: string\n}\n\nexport interface NewPackObjectDataType {\n    cardsPack: NewPackFieldsType\n}\n\nexport interface GetPackQueryParamsType {\n    params?: {\n        packName?: string | null\n        min?: number | null\n        max?: number | null\n        sortPacks?: string | null\n        page?: number | null\n        pageCount?: number | null\n        user_id?: string | null\n    }\n}\n\n export interface PackUpdateFieldsType {\n     _id?: string\n     name?: string\n     path?: string\n     grade?: number\n     shots?: number\n     rating?: number\n     deckCover?: string\n     private?: boolean\n     type?: string\n }\n\nexport interface PackUpdateObjectType {\n    cardsPack: PackUpdateFieldsType\n}\n\nexport const acsessAPI = {\n    loginUser(email: string, password: string, rememberMe: boolean) {\n        return instance.post<UserProfileType>(\"/auth/login\", {email, password, rememberMe});\n\n    },\n    logoutUser() {\n        return instance.delete<UserProfileType>(\"/auth/login\",);\n\n    },\n    registrationUser(email: string, password: string) {\n        return instance.post<registrationUserType>(\"/auth/register\", {email, password})\n\n    },\n    forgotPassword(email: string, from: string, message: string) {\n        return instance.post<UserForgotPassType>(\"/auth/forgot\", {email, from, message});\n    },\n    setNewPassword(password: string, resetPasswordToken: string) {\n        return instance.post<UserNewPasswordType>(\"/auth/set-new-password\", {password, resetPasswordToken});\n    },\n    authUser() {\n        return instance.post<any>(\"/auth/me\", {});\n    },\n\n    postCardPacks(pack: NewPackObjectDataType) {\n        return instance.post<NewPackResponseType>(\"/cards/pack\", pack);\n    },\n    getCardPacks(queryPackObject: GetPackQueryParamsType) {\n        return instance.get<GetPackResponseType>(\"/cards/pack\", queryPackObject);\n    },\n    deleteCardsPacks(id: string) {\n        return instance.delete<DeletePackResponseType>(\"/cards/pack\", {params: {id}});\n    },\n    updateCardPacks(packUpdateObject: PackUpdateObjectType) {\n        return instance.put<PackUpdateResponseDataType>(\"/cards/pack\", packUpdateObject);\n    },\n    // API for cards\n    getAllCards(queryCardsObject: GetCardQueryType) {\n        return instance.get<GetCardResponseType>(\"/cards/card\", queryCardsObject);\n    },\n    postCard(newCardObject: PostCardQueryType) {\n        return instance.post<PostCardResponseType>(\"/cards/card\", newCardObject);\n    },\n    updateCardById(cardUpdateObject: UpdateCardQueryType) {\n        return instance.put<UpdateCardResponseType>(\"/cards/card\", cardUpdateObject);\n    },\n    deleteCardByID(id: string) {\n        return instance.delete<DeleteCardResponseType>(\"/cards/card\", {params: {id}});\n    },\n}\n\n\n\n\n\n\n\n","type InitStateType = {\n    errorMessage: string | null\n    appStatus: AppStatusType\n    error: string | null\n};\n\nconst initState: InitStateType = {\n    errorMessage: null,\n    appStatus: 'idle',\n    error: null\n};\nexport type AppStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\nexport type CombinedActionType = SetMessageErrorActionType\n    | SetAppStatusType\n    | SetAppErrorActionType\n\nexport const appReducer = (state = initState, action: CombinedActionType): InitStateType => {\n    switch (action.type) {\n        case \"APP/SET-ERROR-MESSAGE\": {\n            return {...state, errorMessage: action.errorMessage}\n        }\n        case \"APP/SET-APP-STATUS\" : {\n            return {...state, appStatus: action.value}\n        }\n        case 'APP/SET-ERROR':\n            return {...state, error: action.error}\n        default:\n            return state;\n    }\n};\n\n\nexport const setMessageErrorAC = (errorMessage: string) => ({type: \"APP/SET-ERROR-MESSAGE\", errorMessage} as const)\nexport const setAppStatusAC = (value: AppStatusType) => ({type: \"APP/SET-APP-STATUS\", value} as const);\nexport const setAppErrorAC = (error: string | null) => ({type: 'APP/SET-ERROR', error} as const)\n\n\nexport type SetMessageErrorActionType = ReturnType<typeof setMessageErrorAC>\nexport type SetAppStatusType = ReturnType<typeof setAppStatusAC>\nexport type SetAppErrorActionType = ReturnType<typeof setAppErrorAC>","import {acsessAPI, UserProfileType} from \"../../m3-dal/Api\";\nimport {Dispatch} from 'redux';\nimport {setAppErrorAC, setAppStatusAC, setMessageErrorAC} from \"./app-reducer\";\n\n\nexport type InitStateType = typeof initState;\n\nconst initState = {\n    isLoggedIn: false,\n    error: \"\",\n    email: \"\",\n    password: \"\",\n    isFetching: false,\n    isPassRequestSent: false,\n    isPassChanged: false,\n    _id: \"\",\n    name: \"\",\n    avatar: \"\",\n    publicCardPacksCount: 0,\n    created: \"\",\n    update: \"\",\n    isAdmin: false,\n    verified: false,\n    rememberMe: false,\n};\n\nexport const authReducer = (state: InitStateType = initState, action: CombinedActionType): InitStateType => {\n    switch (action.type) {\n        case \"IS-LOGGED-IN\": {\n            return {...state, isLoggedIn: action.value, error: action.error};\n        }\n        case \"SIGN_UP\":\n            return {\n                ...state,\n                email: action.email,\n                password: action.password,\n                error: action.message as string,\n            };\n        case \"IS_FETCHING\":\n            return {\n                ...state, isFetching: action.isFetching\n            }\n        case \"RESTORE/SET-PASS-REQUEST\" : {\n            return {...state, isPassRequestSent: action.value}\n        }\n        case \"RESTORE/SET-PASS-CHANGED\" : {\n            return {...state, isPassChanged: action.value}\n        }\n        case \"ADD-PROFILE\": {\n            return {...state, ...action.value};\n        }\n        default:\n            return state;\n    }\n};\n\ntype CombinedActionType = LoggedInType\n    | SignupActionType\n    | SetIsFetchingSignupActionType\n    | SetPassRequestType\n    | SetPassChangedType\n    | profileACType;\n\nexport type LoggedInType = ReturnType<typeof loggedInAC>;\nexport type SignupActionType = ReturnType<typeof signupAC>;\nexport type SetIsFetchingSignupActionType = ReturnType<typeof setIsFetchingSignupAC>;\nexport type SetPassRequestType = ReturnType<typeof setPassRequestAC>\nexport type SetPassChangedType = ReturnType<typeof setPassChangedAC>\nexport type profileACType = ReturnType<typeof profileAC>\n\nexport const loggedInAC = (value: boolean, error: string) =>\n    ({type: \"IS-LOGGED-IN\", value, error} as const);\n\nexport const signupAC = (email: string, password: string, message?: string) =>\n    ({type: 'SIGN_UP', email, password, message} as const);\n\nexport const setIsFetchingSignupAC = (isFetching: boolean) =>\n    ({type: 'IS_FETCHING', isFetching} as const);\n\nexport const setPassRequestAC = (value: boolean) => ({type: \"RESTORE/SET-PASS-REQUEST\", value} as const);\nexport const setPassChangedAC = (value: boolean) => ({type: \"RESTORE/SET-PASS-CHANGED\", value} as const);\n\nexport const profileAC = (value: UserProfileType) => ({type: \"ADD-PROFILE\", value} as const);\n\n// thunks-------------------------------------------------------------------\n\nexport const loggedInTC = (email: string, password: string, rememberMe: boolean) => {\n    return (dispatch: Dispatch) => {\n        acsessAPI.loginUser(email, password, rememberMe)\n            .then((res) => {\n                dispatch(profileAC(res.data))\n                dispatch(loggedInAC(true, \"\"))\n            })\n            .catch(rej => {\n                //    if has response and has data\n                if (rej.response?.data) {\n                    dispatch(loggedInAC(false, rej.response.data.error))\n                } else {\n                    dispatch(loggedInAC(false, \"network error\"))\n                }\n            })\n    }\n}\n\nexport const logoutTC = () => (dispatch: Dispatch<CombinedActionType>) => {\n    acsessAPI.logoutUser()\n        .then(res => {\n            //  dispatch(profileAC(res.data))\n            dispatch(loggedInAC(false, \"\"))\n        }).catch((rej) => {\n        // if (rej.response.data){\n        // console.log(rej.response.data.error)\n        dispatch(loggedInAC(false, rej.response.data.error))\n    })\n}\n\n\nexport const authMeTC = () => {\n    return (dispatch: Dispatch<CombinedActionType>) => {\n        acsessAPI.authUser()\n            .then((res) => {\n                dispatch(profileAC(res.data))\n                dispatch(loggedInAC(true, \"\"))\n            }).catch(rej => {\n            const error = rej.response\n                ? rej.response.data.error\n                : (rej.message + ', more details in the console');\n            console.log(error)\n        })\n    }\n}\n\nexport const registrationThunk = (email: string, password: string) => {\n    return (dispatch: Dispatch) => {\n        acsessAPI.registrationUser(email, password)\n            .then(() => {\n                dispatch(signupAC(email, password));\n                dispatch(setIsFetchingSignupAC(true));\n            })\n            .catch(error => {\n                dispatch(setAppErrorAC(error.message))\n                dispatch(setAppStatusAC('failed'))\n                const message = error.response.data.error\n                dispatch(signupAC(email, password, message))\n                //  dispatch(setAppErrorAC(error.message))\n                //   dispatch(setAppStatusAC(\"failed\"))\n            })\n    }\n}\n\nexport const setNewPasswordTC = (password: string, resetPasswordToken: string) => {\n    return (dispatch: Dispatch<any>) => {\n        dispatch(setAppStatusAC('loading'))\n        acsessAPI.setNewPassword(password, resetPasswordToken)\n            .then((res) => {\n                if (res.status === 200) {\n                    dispatch(setPassChangedAC(true))\n                    dispatch(setAppStatusAC('succeeded'))\n                }\n            })\n            .catch(error => {\n                dispatch(setAppErrorAC(error.message))\n                dispatch(setAppStatusAC('failed'))\n                if (error.response && error.response.status) {\n                    if (error.response?.data?.error) {\n                        dispatch(setMessageErrorAC(error.response.data.error))\n                    } else {\n                        dispatch(setMessageErrorAC('Something went wrong'))\n                    }\n                } else {\n                    dispatch(setMessageErrorAC('Something went wrong'))\n                }\n            })\n    }\n}\n\n\nexport const forgotPassTC = (email: string) => {\n    return (dispatch: Dispatch<any>) => {\n        dispatch(setAppStatusAC('loading'))\n        const from = \"santari33@gmail.com\";\n        const message = \"<div>password recovery link: <a href='https://maunonen.github.io/it-incubator-ignat-project/#/set-new-password/$token$'>link</a></div>\";\n\n        acsessAPI.forgotPassword(email, from, message)\n            .then((res) => {\n                console.log('Thunk', res)\n                if (res.data.success) {\n                    dispatch(setPassRequestAC(true))\n                    dispatch(setAppStatusAC('succeeded'))\n                }\n            })\n            .catch(error => {\n                dispatch(setAppErrorAC(error.message))\n                dispatch(setAppStatusAC('failed'))\n                if (error.response && error.response.status) {\n                    dispatch(setMessageErrorAC(error.response.data.error))\n                    dispatch(setPassRequestAC(false))\n                    /*if (error.response.status === 404) {\n                        // Request made and server responded\n                        /!*console.log(error.response.data);\n                        console.log(error.response.status);\n                        console.log(error.response.headers);*!/\n                        dispatch(setMessageErrorAC(error.response.data.error))\n                        dispatch(setPassRestoredAC(false))\n\n                    } else if (error.response.status === 400) {\n                        dispatch(setMessageErrorAC(error.response.data.error))\n                        dispatch(setPassRestoredAC(false))\n                    } else if (error.response.status === 500) {\n                        dispatch(setMessageErrorAC(error.response.data.error))\n                        dispatch(setPassRestoredAC(false))\n                    }*/\n                } else {\n                    dispatch(setMessageErrorAC(\"Something went wrong\"))\n                    dispatch(setPassRequestAC(false))\n                    if (error.request) {\n                        // The request was made but no response was received\n                        console.log(error.request);\n                    } else {\n                        // Something happened in setting up the request that triggered an Error\n                        console.log('Error', error.message);\n                    }\n                }\n            })\n    }\n}\n","import React from 'react'\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppStoreType} from \"../../m2-bll/redux/store\";\nimport {useFormik} from \"formik\";\nimport * as Yup from 'yup';\nimport {NavLink, Redirect} from \"react-router-dom\";\nimport {\n    Button, Card, createStyles, FormControl, FormGroup, Checkbox,\n    Grid, makeStyles, TextField, Theme, Typography, FormControlLabel, Link\n} from \"@material-ui/core\";\nimport {loggedInTC} from \"../../m2-bll/redux/auth-reducer\";\nimport {PATH} from \"../Routes\";\nimport {useHistory} from \"react-router-dom\";\n\n\n\nconst useStyles = makeStyles<Theme>(theme => createStyles({\n    root: {\n        textAlign: \"center\",\n        padding: \"30px 30px\",\n        width: \"413px\",\n    },\n    formTitle: {\n        marginBottom: \"30px\",\n    },\n    formSubtitle: {\n        marginBottom: \"40px\",\n    },\n    formDescription: {\n        marginBottom: \"40px\",\n    },\n    formButtonBlock: {\n        margin: \"0px 35px\",\n        display: \"flex\",\n        alignItems: \"\",\n    },\n    displayStretch: {\n        display: \"flex\",\n        alignItems: \"stretch\"\n    },\n    textFieldArea: {\n        margin: \"0px 10px\"\n    },\n}))\n\nconst LoginPage: React.FC = () => {\n\n    const classes = useStyles()\n    const dispatch = useDispatch()\n    const isLoggedIn = useSelector((state: AppStoreType) => state.auth.isLoggedIn)\n    const isLoggedError = useSelector((state: AppStoreType) => state.auth.error)\n\n    const restoreSchema = Yup.object().shape({\n        email: Yup.string().email('Invalid email').required('Required'),\n    });\n\n    const formik = useFormik({\n        initialValues: {\n            email: 'nya-admin@nya.nya',\n            password: '1qazxcvBG',\n            remember: false\n        },\n        validationSchema: restoreSchema,\n        onSubmit: values => {\n            dispatch(loggedInTC(values.email, values.password, values.remember))\n            formik.resetForm()\n        },\n    })\n\n    const history = useHistory();\n\n\n    if (isLoggedIn) {\n        return <Redirect to={'/'}/>\n        // history.push( '/pack' );\n        // history.goBack();\n    }\n\n    return <Grid\n        container\n        justify=\"center\"\n        alignItems=\"center\"\n        style={{minHeight: '100vh'}}\n    >\n        <Grid item>\n            <Card className={classes.root}>\n                <form onSubmit={formik.handleSubmit}>\n                    <Typography\n                        variant={\"h1\"}\n                        className={classes.formTitle}\n                    >It-Incubator\n                    </Typography>\n                    <Typography\n                        variant={\"h2\"}\n                        className={classes.formSubtitle}\n                    >Signin</Typography>\n                    <div style={{color: \"red\"}}>{isLoggedError}</div>\n                    <FormControl className={classes.displayStretch}>\n                        <FormGroup className={classes.textFieldArea}>\n                            <TextField\n                                type=\"email\"\n                                label=\"Email\"\n                                margin=\"dense\"\n                                {...formik.getFieldProps('email')}\n                            />\n                            { formik.touched.email && formik.errors.email &&\n                            <div style={{color: 'red'}}>{formik.errors.email}</div>\n                            }\n                            <TextField\n                                type=\"password\"\n                                label=\"password\"\n                                margin=\"dense\"\n                                {...formik.getFieldProps('password')}\n                            />\n                            {formik.touched.password && formik.errors.password &&\n                            <div style={{color: 'red'}}>{formik.errors.password}</div>\n                            }\n                            <Typography\n                                variant={\"body1\"}\n                                className={classes.formDescription}\n                                align={\"left\"}\n                            >Enter your email address and password\n                            </Typography>\n\n\n                            <FormControlLabel\n                                label={'Remember me'}\n                                control={<Checkbox/>}\n                                // onChange={changeRememberCheckboxHandler}\n                                {...formik.getFieldProps('remember')}\n                            />\n\n                            <div className={classes.formButtonBlock}>\n                            <Button\n                                type={'reset'}\n                                onClick={() => {formik.resetForm()}}\n                                variant={'contained'}\n                                className={classes.formButtonBlock}\n                                color={'primary'}>\n                                Reset\n                            </Button>\n                            <Button\n                                type={'submit'}\n                                variant={'contained'}\n                                className={classes.formButtonBlock}\n                                color={'primary'}>\n                                Login\n                            </Button>\n                            </div>\n\n                            <Typography\n                                variant={\"body1\"}\n                                className={classes.formLinkTitle}\n                                style={{ marginTop : \"30px\", marginBottom : \"15px\"}}\n                            >Don't have an account</Typography>\n                            <Link\n                                component={NavLink}\n                                to={PATH.SIGNUP}\n                                color={\"textPrimary\"}\n                            >Sign up\n                            </Link>\n                        </FormGroup>\n                    </FormControl>\n                </form>\n            </Card>\n        </Grid>\n    </Grid>\n}\nexport default LoginPage\n","import React, {useEffect} from 'react'\nimport { Grid} from '@material-ui/core'\nimport {useDispatch, useSelector} from \"react-redux\";\n\nimport {authMeTC, InitStateType} from \"../../m2-bll/redux/auth-reducer\"\nimport {AppStoreType} from \"../../m2-bll/redux/store\";\nimport {Redirect} from \"react-router-dom\";\nimport {PATH} from \"../Routes\";\nimport {UserProfileType} from \"../../m3-dal/Api\";\n\n\nexport const ProfilePage: React.FC = () => {\n\n    const dispatch = useDispatch()\n    const isLoggedIn = useSelector<AppStoreType, InitStateType>(state => state.auth)\n    const userProfile = useSelector<AppStoreType, UserProfileType>(state => state.auth)\n\n\n    useEffect(() => {\n        if (!userProfile._id) {\n            dispatch(authMeTC())\n        }\n    }, [])\n\n\n    if (userProfile._id) {\n        return (\n            <Grid container justify=\"center\">\n                <Grid item xs={5}>\n                    <h1>User profile</h1>\n                    <h3>Id {userProfile._id}</h3>\n                    <h3>Email {userProfile.email}</h3>\n                    <h3>Name {userProfile.name}</h3>\n                    <h3>Avatar <img src={userProfile.avatar} style={{width: 100}}/></h3>\n                    <h3>PublicCardPacksCount= {userProfile.publicCardPacksCount}</h3>\n                    <h3>created {userProfile.created}</h3>\n                </Grid>\n            </Grid>\n        )\n    } else {\n        return (\n            <Redirect from={PATH.ALL_ROUTES} to=\"/login\"/>\n        )\n    }\n}\n\nexport default ProfilePage\n\n\n","import React from 'react'\n\nconst NotFoundPage : React.FC = () => {\n    return (\n        <>\n            <h1>Not found page</h1>\n        </>\n    )\n}\nexport default NotFoundPage","import React from \"react\";\n\nexport interface MessageIconPropsType {\n    size?: string\n}\n\nconst LoadingIcon: React.FC<MessageIconPropsType> = ({size}) => {\n    return (\n        <svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            width={size}\n            height={size}\n            viewBox=\"0 0 512 512\"\n        >\n            <path\n                fill=\"#6e75e2\"\n                d=\"M30 256C30 131.383 131.383 30 256 30c46.867 0 91.563 14.211 129.196 40.587h-29.074c-8.284 0-15 6.716-15 15s6.716 15 15 15h70.292c8.284 0 15-6.716 15-15V15.295c0-8.284-6.716-15-15-15s-15 6.716-15 15v37.339C366.987 18.499 312.91 0 256 0 187.62 0 123.333 26.629 74.98 74.98 26.629 123.333 0 187.62 0 256c0 44.921 11.871 89.182 34.33 127.998 2.78 4.806 7.818 7.49 12.997 7.49 2.55 0 5.134-.651 7.499-2.019 7.17-4.149 9.619-13.325 5.471-20.496C40.477 334.718 30 295.652 30 256zM477.67 128.002c-4.15-7.171-13.328-9.619-20.496-5.47-7.17 4.149-9.619 13.325-5.471 20.496C471.523 177.281 482 216.346 482 256c0 124.617-101.383 226-226 226-46.863 0-91.551-14.215-129.18-40.587h29.058c8.284 0 15-6.716 15-15s-6.716-15-15-15H85.587c-8.284 0-15 6.716-15 15v70.292c0 8.284 6.716 15 15 15s15-6.716 15-15v-37.376C145.013 493.475 199.083 512 256 512c68.38 0 132.667-26.629 181.02-74.98C485.371 388.667 512 324.38 512 256c0-44.923-11.871-89.184-34.33-127.998z\"\n            ></path>\n            <path\n                fill=\"#e2dff4\"\n                d=\"M377.424 285.689l-13.599-7.852c1.446-7.162 2.175-14.469 2.175-21.838s-.729-14.676-2.175-21.838l13.599-7.852a15.001 15.001 0 005.49-20.49l-20-34.641c-4.142-7.174-13.315-9.632-20.49-5.49l-13.602 7.853a108.886 108.886 0 00-37.821-21.856V136c0-8.284-6.716-15-15-15h-40c-8.284 0-15 6.716-15 15v15.686a108.89 108.89 0 00-37.822 21.856l-13.601-7.853c-7.174-4.144-16.349-1.685-20.49 5.49l-20 34.641c-4.142 7.174-1.684 16.348 5.49 20.49l13.598 7.851c-1.446 7.163-2.176 14.47-2.176 21.838s.729 14.676 2.176 21.838l-13.598 7.851c-7.174 4.142-9.632 13.316-5.49 20.49l20 34.641c4.142 7.175 13.315 9.633 20.49 5.49l13.601-7.853a108.865 108.865 0 0037.822 21.856V376c0 8.284 6.716 15 15 15h40c8.284 0 15-6.716 15-15v-15.686a108.886 108.886 0 0037.821-21.856l13.602 7.853c7.174 4.142 16.348 1.683 20.49-5.49l20-34.641a15.003 15.003 0 00-5.49-20.491zM256 296c-22.091 0-40-17.909-40-40s17.909-40 40-40 40 17.909 40 40-17.909 40-40 40z\"\n            ></path>\n            <path\n                fill=\"#bebcdd\"\n                d=\"M384.413 217.203a14.994 14.994 0 00-1.499-11.382l-20-34.641c-4.142-7.174-13.315-9.632-20.49-5.49l-13.602 7.853a108.886 108.886 0 00-37.821-21.856V136c0-8.284-6.716-15-15-15H256v95c22.091 0 40 17.909 40 40s-17.909 40-40 40v95h20.001c8.284 0 15-6.716 15-15v-15.686a108.886 108.886 0 0037.821-21.856l13.602 7.853c7.174 4.142 16.348 1.683 20.49-5.49l20-34.641a15.003 15.003 0 001.499-11.382 14.994 14.994 0 00-6.989-9.108l-13.599-7.852C365.271 270.676 366 263.369 366 256s-.729-14.676-2.175-21.838l13.599-7.852a14.995 14.995 0 006.989-9.107z\"\n            ></path>\n            <path\n                fill=\"#f1f1f4\"\n                d=\"M256 311c-30.327 0-55-24.673-55-55s24.673-55 55-55 55 24.673 55 55-24.673 55-55 55zm0-80c-13.785 0-25 11.215-25 25s11.215 25 25 25 25-11.215 25-25-11.215-25-25-25z\"\n            ></path>\n            <path\n                fill=\"#e2dff4\"\n                d=\"M281 256c0 13.785-11.215 25-25 25v30c30.327 0 55-24.673 55-55s-24.673-55-55-55v30c13.785 0 25 11.215 25 25z\"\n            ></path>\n            <g fill=\"#525cdd\">\n                <path\n                    d=\"M426.413.295c-8.284 0-15 6.716-15 15v37.339C366.987 18.499 312.91 0 256 0v30c46.867 0 91.563 14.211 129.196 40.587h-29.074c-8.284 0-15 6.716-15 15s6.716 15 15 15h70.292c8.284 0 15-6.716 15-15V15.295c-.001-8.284-6.717-15-15.001-15zM477.67 128.002c-4.15-7.171-13.328-9.619-20.496-5.47-7.17 4.149-9.619 13.325-5.471 20.496C471.523 177.281 482 216.346 482 256c0 124.617-101.383 226-226 226v30c68.38 0 132.667-26.629 181.02-74.98C485.371 388.667 512 324.38 512 256c0-44.923-11.871-89.184-34.33-127.998z\"></path>\n            </g>\n        </svg>\n    );\n}\n\nexport default LoadingIcon;","import React from 'react'\nimport {Card, createStyles, Grid, makeStyles, Theme, Typography} from \"@material-ui/core\";\nimport LoadingIcon from \"../icons/LoadingIcon\";\n\n\nconst useStyles = makeStyles<Theme>(theme => createStyles({\n    root: {\n        textAlign: \"center\",\n        padding: \"30px 30px\",\n        maxWidth: \"413px\",\n    },\n    loadingTitle : {\n        margin: \"30px 40px\"\n    },\n    loadingMessage : {\n        margin: \"30px 40px\"\n    }\n}))\n\nexport type LoadingPropsType = {\n    message?: string\n}\n\nconst Loading: React.FC<LoadingPropsType> = (props) => {\n\n    const classes = useStyles()\n    const {message} = props\n\n    return (\n        <Grid\n            container\n            justifyContent=\"center\"\n            alignItems=\"center\"\n            style={{minHeight: '100vh'}}\n        >\n            <Card\n                className={classes.root}\n            >\n                <Grid item>\n                    <Typography\n                        variant={\"h1\"}\n                        className={classes.loadingTitle}\n                    >It-incubator</Typography>\n                    <LoadingIcon size={\"100px\"}/>\n                    {\n                        message &&\n                        <Typography\n                            variant={\"body1\"}\n                            className={classes.loadingMessage}\n                        >\n                            {message}\n                        </Typography>}\n                </Grid>\n            </Card>\n        </Grid>\n    )\n}\n\nexport default Loading","import React from 'react'\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppStoreType} from \"../../m2-bll/redux/store\";\nimport {useFormik} from \"formik\";\nimport * as Yup from 'yup';\nimport {NavLink, Redirect} from \"react-router-dom\";\nimport {\n    Button,\n    Card, createStyles, FormControl,\n    FormGroup,\n    Grid, Link, makeStyles,\n    TextField, Theme, Typography\n} from \"@material-ui/core\";\nimport {PATH} from \"../Routes\";\nimport Loading from \"../common/c7-Progress/Loading\";\nimport {forgotPassTC} from \"../../m2-bll/redux/auth-reducer\";\n\nconst useStyles = makeStyles<Theme>(theme => createStyles({\n    root: {\n        textAlign: \"center\",\n        padding: \"30px 30px\",\n        /*maxWidth: \"413px\",*/\n        width: \"413px\",\n    },\n    formTitle: {\n        marginBottom: \"30px\",\n    },\n    formSubtitle: {\n        marginBottom: \"40px\",\n    },\n    formDescription: {\n        marginTop: \"20px\",\n        marginBottom: \"40px\",\n    },\n    formLinkTitle: {\n        paddingTop: \"30px\",\n        paddingBottom: \"15px\",\n    },\n    formButtonBlock: {\n        margin: \"0px 35px\"\n    },\n    displayStretch: {\n        display: \"flex\",\n        alignItems: \"stretch\"\n    },\n    textFieldArea: {\n        margin: \"0px 10px\"\n    }\n}))\n\n\n\n\nconst RestorePassPage: React.FC = () => {\n\n    const classes = useStyles()\n    const dispatch = useDispatch()\n    const {isLoggedIn} = useSelector((state: AppStoreType) => state.auth)\n    const {isPassRequestSent,} = useSelector((state: AppStoreType) => state.auth)\n    const {errorMessage, appStatus} = useSelector((state: AppStoreType) => state.app)\n\n\n    console.log(errorMessage)\n    console.log('App status', appStatus)\n\n    type FormikErrorType = {\n        email?: string\n    }\n\n    const restoreSchema = Yup.object().shape({\n        email: Yup.string().email('Invalid email').required('Required'),\n    });\n\n    const formik = useFormik({\n        initialValues: {\n            email: '',\n        },\n        validationSchema: restoreSchema,\n        onSubmit: values => {\n            dispatch(forgotPassTC(formik.values.email))\n            formik.resetForm()\n        },\n    })\n\n    if (isLoggedIn) {\n        return <Redirect to={'/'}/>\n    }\n    if (appStatus === 'loading') {\n        return <Loading message={\"Wait a minute please\"}/>\n    }\n    if (isPassRequestSent) {\n        return <Redirect to={PATH.RESTORE_PASS_CHECK_EMAIL}/>\n    }\n\n    return <Grid\n        container\n        justifyContent=\"center\"\n        alignItems=\"center\"\n        style={{minHeight: '100vh'}}\n    >\n        <Grid item>\n            <Card\n                className={classes.root}\n            >\n                <form onSubmit={formik.handleSubmit}>\n                    <Typography\n                        variant={\"h1\"}\n                        className={classes.formTitle}\n                    >It-incubator</Typography>\n                    <Typography\n                        variant={\"h2\"}\n                        className={classes.formSubtitle}\n                    >Forget your password</Typography>\n                    <FormControl className={classes.displayStretch}>\n                        <FormGroup className={classes.textFieldArea}>\n                            <TextField\n                                type=\"email\"\n                                label=\"Email\"\n                                margin=\"normal\"\n                                {...formik.getFieldProps('email')}\n                            />\n                            {\n                                formik.touched.email && formik.errors.email &&\n                                <div style={{color: 'red'}}>{formik.errors.email}</div>\n                            }\n                            <Typography\n                                variant={\"body1\"}\n                                className={classes.formDescription}\n                                align={\"left\"}\n                            >\n                                Enter your email address and we will send you further instructions\n                            </Typography>\n                            <Button\n                                type={'submit'}\n                                variant={'contained'}\n                                className={classes.formButtonBlock}\n                                color={'primary'}>Send instructions</Button>\n                            <Typography\n                                variant={\"body1\"}\n                                className={classes.formLinkTitle}\n                            >Did you remember your password</Typography>\n                            <Link\n                                component={NavLink}\n                                to={PATH.LOGIN}\n                                color={\"textPrimary\"}\n                            >Try logging in\n                            </Link>\n                        </FormGroup>\n                    </FormControl>\n                </form>\n            </Card>\n        </Grid>\n    </Grid>\n}\nexport default RestorePassPage","import React, {useState} from 'react'\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppStoreType} from \"../../m2-bll/redux/store\";\nimport {useFormik} from \"formik\";\nimport * as Yup from 'yup';\nimport { Redirect} from \"react-router-dom\";\nimport { useParams } from 'react-router-dom'\n/*import {setNewPasswordTC} from \"../../m2-bll/redux/restore-pass-reducer\";*/\n/*import {setNew}*/\n\nimport {\n    Button,\n    Card, createStyles,\n    FormControl,\n    FormGroup,\n    Grid, IconButton, Input, InputAdornment,  makeStyles,\n    Theme, Typography\n} from \"@material-ui/core\";\nimport {PATH} from \"../Routes\";\nimport {Visibility, VisibilityOff} from '@material-ui/icons';\nimport {setNewPasswordTC} from \"../../m2-bll/redux/auth-reducer\";\n\n\nconst useStyles = makeStyles<Theme>(theme => createStyles({\n    root: {\n        textAlign: \"center\",\n        padding: \"30px 30px\",\n        maxWidth: \"413px\",\n    },\n    formTitle: {\n        marginBottom: \"30px\",\n    },\n    formSubtitle: {\n        marginBottom: \"20px\",\n    },\n    formDescription: {\n        marginTop: \"20px\",\n        marginBottom: \"40px\",\n    },\n    formLinkTitle: {\n        paddingTop: \"30px\",\n        paddingBottom: \"15px\",\n    },\n    formButtonBlock: {\n        margin: \"35px 35px\"\n    },\n    errorBlock: {\n        paddingTop: \"20px\"\n    }\n}))\n\n\nconst NewPassPage: React.FC = () => {\n\n    const classes = useStyles()\n    const dispatch = useDispatch()\n    const { isLoggedIn} = useSelector((state: AppStoreType) => state.auth)\n    const { isPassChanged} = useSelector((state: AppStoreType) => state.auth)\n    const { appStatus } = useSelector((state: AppStoreType) => state.app)\n    const [showPassword, setShowPassword] = useState(false)\n    const { token } = useParams<{token: string}>();\n    console.log('Token', token)\n\n    type FormikErrorType = {\n        password?: string\n    }\n\n    const restoreSchema = Yup.object().shape({\n        password: Yup.string()\n            .required('No password provided.')\n            .min(8, 'Password is too short - should be at least 8 character.')\n            .matches(/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]{8,}$/, 'Minimum eight characters, at least one letter, one number and one special character.'),\n    });\n\n    const formik = useFormik({\n        initialValues: {\n            password: '',\n        },\n        validationSchema: restoreSchema,\n        onSubmit: values => {\n            if (token) {\n                dispatch(setNewPasswordTC(formik.values.password, token))\n            }\n            formik.resetForm()\n        },\n    })\n\n    const handleClickShowPassword = () => {\n        setShowPassword(!showPassword)\n    }\n    const handleMouseDownPassword = () => {\n        setShowPassword(!showPassword)\n    }\n    if ( appStatus === 'loading') {\n        return <div>Loading</div>\n    }\n    if (isLoggedIn) {\n        return <Redirect to={'/'}/>\n    }\n    if (isPassChanged) {\n        return <Redirect to={PATH.LOGIN}/>\n    }\n\n    return <Grid\n        container\n        justifyContent=\"center\"\n        alignItems=\"center\"\n        style={{minHeight: '100vh'}}\n    >\n        <Card\n            className={classes.root}\n        >\n            <Grid item>\n                <form onSubmit={formik.handleSubmit}>\n                    <Typography\n                        variant={\"h1\"}\n                        className={classes.formTitle}\n                    >It-incubator</Typography>\n                    <Typography\n                        variant={\"h2\"}\n                        className={classes.formSubtitle}\n                    >Create new pasword</Typography>\n                    <FormControl>\n                        <FormGroup>\n                            <Input\n                                type={showPassword ? 'text' : 'password'}\n                                placeholder={\"Password\"}\n                                endAdornment={\n                                    <InputAdornment position=\"end\">\n                                        <IconButton\n                                            aria-label=\"toggle password visibility\"\n                                            onClick={handleClickShowPassword}\n                                            onMouseDown={handleMouseDownPassword}\n                                            edge=\"end\"\n                                        >\n                                            {showPassword ? <Visibility/> : <VisibilityOff/>}\n                                        </IconButton>\n                                    </InputAdornment>\n                                }\n                                {...formik.getFieldProps('password')}\n\n                            />\n                            {\n                                (formik.touched.password && formik.errors.password) ?\n                                    <div\n                                        style={{color: 'red'}}\n                                        className={classes.errorBlock}\n\n                                    >{formik.errors.password}</div> :\n                                    <br/>\n                            }\n                            <Typography\n                                variant={\"body1\"}\n                                className={classes.formDescription}\n                                align={\"left\"}\n                            >\n                                Create new password and we will send you further instructions to email\n                            </Typography>\n                            <Button\n                                type={'submit'}\n                                variant={'contained'}\n                                className={classes.formButtonBlock}\n                                color={'primary'}>Create new password</Button>\n                        </FormGroup>\n                    </FormControl>\n                </form>\n            </Grid>\n        </Card>\n    </Grid>\n}\nexport default NewPassPage","import React from \"react\";\n\nexport interface MessageIconPropsType  {\n    size? : string\n}\n\nconst MessageIcon : React.FC<MessageIconPropsType> = ({size}) =>  {\n    return (\n        <svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            /*width=\"512\"\n            height=\"512\"*/\n            height={ size }\n            width={ size }\n            viewBox=\"0 0 512 512\"\n        >\n            <linearGradient\n                id=\"SVGID_1_\"\n                x1=\"432.334\"\n                x2=\"198.334\"\n                y1=\"502.645\"\n                y2=\"192.646\"\n                gradientUnits=\"userSpaceOnUse\"\n            >\n                <stop offset=\"0\" stopColor=\"#d2deff\" stopOpacity=\"0\"></stop>\n                <stop offset=\"1\" stopColor=\"#b7c5ff\"></stop>\n            </linearGradient>\n            <path\n                fill=\"url(#SVGID_1_)\"\n                d=\"M501.873 153.583c-22.357-56.888-91.226-91.003-149.556-68.427-66.582 25.77-44.506 131.673-104.983 153.088-32.669 11.568-80.962-31.644-113.969-38.271-60.821-12.21-115.881 30.705-129.439 90.134-13.832 60.63 8.353 141.61 74.967 158.066 79.35 19.602 120.683-51.729 187.249-72.211 68.31-21.019 144.263 28.622 200.814-31.776 41.78-44.62 57.055-134.271 34.917-190.603z\"\n            ></path>\n            <path\n                fill=\"#2626bc\"\n                d=\"M476.847 178.593c0-39.497-32.019-71.517-71.517-71.517-30.6 0-56.699 19.225-66.91 46.25H79.812c-11.046 0-20 8.954-20 20v221.41c0 11.046 8.954 20 20 20h352.375c11.046 0 20-8.954 20-20v-162.14c15.099-13.113 24.66-32.435 24.66-54.003z\"\n                opacity=\"0.1\"\n            ></path>\n            <g fill=\"#fff\">\n                <path d=\"M432.187 389.736H79.812c-11.046 0-20-8.954-20-20v-221.41c0-11.046 8.954-20 20-20h352.375c11.046 0 20 8.954 20 20v221.41c0 11.046-8.954 20-20 20z\"></path>\n                <path d=\"M262.092 223.711l190.096 146.025c0 11.046-8.954 20-20 20H79.812c-11.046 0-20-8.954-20-20l190.096-146.025a10 10 0 0112.184 0z\"></path>\n                <path d=\"M249.908 294.352L59.812 148.326c0-11.046 8.954-20 20-20h352.375c11.046 0 20 8.954 20 20L262.092 294.352a10.002 10.002 0 01-12.184 0z\"></path>\n            </g>\n            <path\n                fill=\"#6583fe\"\n                d=\"M370.947 363.125h-32.134a5 5 0 01-5-5v-22.154a5 5 0 015-5h32.134a5 5 0 015 5v22.154a5 5 0 01-5 5z\"\n            ></path>\n            <path\n                fill=\"#2626bc\"\n                d=\"M311.871 342.743h-27.833a5 5 0 110-10h27.833a5 5 0 110 10zM311.871 363.125h-97.833a5 5 0 110-10h97.833a5 5 0 110 10z\"\n            ></path>\n            <g>\n                <ellipse\n                    cx=\"405.33\"\n                    cy=\"153.593\"\n                    fill=\"#6583fe\"\n                    rx=\"71.517\"\n                    ry=\"71.517\"\n                    transform=\"rotate(-80.8 405.29 153.649)\"\n                ></ellipse>\n                <path\n                    fill=\"#2626bc\"\n                    d=\"M405.33 230.11c42.191 0 76.517-34.325 76.517-76.517s-34.325-76.517-76.517-76.517-76.517 34.325-76.517 76.517c0 24.544 11.629 46.41 29.653 60.421l-99.42 76.372a5.004 5.004 0 01-6.092 0L64.992 146c1.121-7.17 7.341-12.674 14.82-12.674h229.366a5 5 0 100-10H79.812c-13.785 0-25 11.215-25 25v221.41c0 13.785 11.215 25 25 25h352.375c13.785 0 25-11.215 25-25v-132.14a5 5 0 10-10 0V359.59L316.28 259.031l50.94-39.13a76.017 76.017 0 0038.11 10.209zm-209.61 28.921L64.812 359.59V158.472zm251.27 113.018c-1.118 7.174-7.32 12.687-14.803 12.687H79.812c-7.483 0-13.685-5.513-14.803-12.687l138.919-106.713 42.934 32.98c2.69 2.066 5.914 3.1 9.138 3.1s6.447-1.033 9.138-3.1l42.934-32.981zM338.813 153.593c0-36.677 29.839-66.517 66.517-66.517s66.517 29.839 66.517 66.517c0 36.677-29.839 66.517-66.517 66.517s-66.517-29.84-66.517-66.517z\"\n                ></path>\n            </g>\n            <path\n                fill=\"#fff\"\n                d=\"M374.114 129.204l10.206 24.389-10.206 24.389c-1.733 4.142 2.448 8.292 6.577 6.528l61.619-26.319c4.048-1.729 4.048-7.467 0-9.196l-61.619-26.319c-4.129-1.764-8.31 2.386-6.577 6.528z\"\n            ></path>\n            <g fill=\"#6583fe\">\n                <path d=\"M330.828 81.671a14.45 14.45 0 01-10.253-4.24c-5.654-5.654-5.654-14.853 0-20.506 5.651-5.652 14.852-5.654 20.505 0 5.654 5.654 5.654 14.853 0 20.506a14.45 14.45 0 01-10.252 4.24zm0-18.991a4.487 4.487 0 00-3.183 1.316 4.506 4.506 0 000 6.364 4.505 4.505 0 006.364 0 4.506 4.506 0 000-6.364 4.487 4.487 0 00-3.181-1.316zM218.538 459.315a14.457 14.457 0 01-10.253-4.24c-5.654-5.654-5.654-14.853 0-20.506 5.652-5.653 14.854-5.653 20.506 0 5.654 5.654 5.654 14.853 0 20.506a14.453 14.453 0 01-10.253 4.24zm0-18.991a4.487 4.487 0 00-3.183 1.316 4.506 4.506 0 000 6.364 4.506 4.506 0 006.365 0 4.506 4.506 0 000-6.364 4.487 4.487 0 00-3.182-1.316zM294.78 94.547a4.983 4.983 0 01-3.535-1.464l-5.965-5.964-5.965 5.964a5 5 0 01-7.07-7.071l9.5-9.5a5 5 0 017.07 0l9.5 9.5a5 5 0 01-3.535 8.535zM439.746 440.322a4.983 4.983 0 01-3.535-1.464l-5.965-5.964-5.965 5.964a5 5 0 01-7.07-7.071l9.5-9.5a5 5 0 017.07 0l9.5 9.5a5 5 0 01-3.535 8.535zM178.884 445.072a4.983 4.983 0 01-3.535-1.464l-5.965-5.964-5.965 5.964a5 5 0 01-7.07-7.071l9.5-9.5a5 5 0 017.07 0l9.5 9.5a5 5 0 01-3.535 8.535z\"></path>\n            </g>\n        </svg>\n    );\n}\n\nexport default MessageIcon;","import React from 'react'\nimport { useSelector} from \"react-redux\";\nimport {AppStoreType} from \"../../m2-bll/redux/store\";\nimport {useFormik} from \"formik\";\nimport * as Yup from 'yup';\nimport { Redirect} from \"react-router-dom\";\n\nimport {Card, createStyles,\n\n    Grid,  makeStyles,\n     Theme, Typography\n} from \"@material-ui/core\";\nimport MessageIcon from '../common/icons/MessageIcon';\n\nconst useStyles = makeStyles<Theme>(theme => createStyles({\n    root: {\n        textAlign: \"center\",\n        padding: \"30px 30px\",\n        maxWidth: \"413px\",\n    },\n    formSubtitle: {\n        marginBottom: \"20px\",\n    },\n    formDescription: {\n        marginTop: \"20px\",\n        marginBottom: \"40px\",\n    },\n    formLinkTitle: {\n        paddingTop: \"30px\",\n        paddingBottom: \"15px\",\n    },\n    formButtonBlock: {\n        margin: \"0px 35px\"\n    },\n    formIcon: {\n        /*fontSize: \"64px\",*/\n        margin: \"25px 0px\",\n        color: \"#21268F\",\n        opacity: 0.7,\n    }\n}))\n\n\nconst RestorePassPage: React.FC = () => {\n\n    const classes = useStyles()\n    const isLoggedIn = useSelector((state: AppStoreType) => state.auth.isLoggedIn)\n\n    if (isLoggedIn) {\n        return <Redirect to={'/'}/>\n    }\n\n    return <Grid\n        container\n        justifyContent=\"center\"\n        alignItems=\"center\"\n        style={{minHeight: '100vh'}}\n    >\n        <Card\n            className={classes.root}\n        >\n            <Grid item>\n                <Typography\n                    variant={\"h1\"}\n                    className={classes.formTitle}\n                >It-incubator</Typography>\n                <div className={classes.formIcon}>\n                    <MessageIcon\n                        size=\"72px\"\n                    />\n                </div>\n                <Typography\n                    variant={\"h2\"}\n                    className={classes.formSubtitle}\n                >Forget your password</Typography>\n                <Typography\n                    variant={\"body1\"}\n                    className={classes.formDescription}\n                >\n                    We’ve sent an Email with instructions to example@mail.com\n                </Typography>\n            </Grid>\n        </Card>\n    </Grid>\n}\nexport default RestorePassPage","import React, {useEffect} from 'react';\nimport {makeStyles} from '@material-ui/core/styles';\nimport Slider from '@material-ui/core/Slider';\nimport {AppStoreType} from \"../../../m2-bll/redux/store\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {GetPackQueryParamsType} from \"../../../m3-dal/Api\";\nimport {setMinCardsCountAC, setMaxCardsCountAC} from \"../../../m2-bll/redux/pack-reducer\";\n\nconst useStyles = makeStyles({\n    root: {\n        /*width: 300,*/\n    },\n});\n\nfunction valuetext(value: number) {\n    return `${value}`;\n}\n\nexport default function RangeSlider() {\n\n    const classes = useStyles();\n    const pack = useSelector((state: AppStoreType) => state.pack);\n    const [value, setValue] = React.useState<number[]>([0, 103]);\n\n    const dispatch = useDispatch();\n\n    const getAllPacks = () => {\n        dispatch(getAllPacks())\n    };\n    //--------------------------------------------------------\n\n    const handleChange = (event: any, newValue: number | number[]) => {\n        setValue(newValue as number[]);\n    };\n\n\n    useEffect(() => {\n        if ((pack.min != null) && pack.min !== value[0]  && pack.max && pack.max !== value[1]) {\n            setValue([pack.min, pack.max])\n        }\n    }, [pack]);\n\n\n\n    useEffect(() => {\n            const setTO = setTimeout(() => {\n                 dispatch(setMinCardsCountAC(value[0]))\n            }, 1500)\n            return () => {\n                clearTimeout(setTO)\n            }\n        }, [value[0]]\n    );\n\n    useEffect(() => {\n            const setTO = setTimeout(() => {\n                 dispatch(setMaxCardsCountAC(value[1]))\n            }, 1500)\n            return () => {\n                clearTimeout(setTO)\n            }\n        }, [value[1]]\n    );\n\n\n    return (\n        <>\n            <Slider\n                value={value}\n                onChange={handleChange}\n                valueLabelDisplay=\"auto\"\n                aria-labelledby=\"range-slider\"\n                getAriaValueText={valuetext}\n            />\n\n        </>\n    );\n}\n","import React from 'react';\nimport {makeStyles} from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Button from \"@material-ui/core/Button\";\nimport Typography from '@material-ui/core/Typography';\nimport {ButtonGroup} from \"@material-ui/core\";\nimport {getAllPack, setUserIdAC} from \"../../../m2-bll/redux/pack-reducer\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppStoreType} from \"../../../m2-bll/redux/store\";\n\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        flexGrow: 0,\n    },\n    privateModeHeader : {\n        marginBottom : \"20px\",\n    },\n    privateModeBlock : {\n        display: \"flex\",\n        alignItems: \"stretch\",\n        marginBottom : \"40px\",\n    },\n    modeButton : {\n        padding: \"8px 32px\",\n        borderRadius: \"0px\",\n        textAlign: \"center\",\n    },\n    paper: {\n        /*padding: theme.spacing(1),*/\n        /*textAlign: 'left',*/\n        /*color: theme.palette.text.secondary,*/\n        /*height: 600,*/\n        /*backgroundColor: \"#e2dfef\"*/\n    },\n    sliderCaption: {\n        marginBottom : \"40px\",\n        /*padding: theme.spacing(6),*/\n        /*textAlign: 'center',*/\n    },\n}));\n\nexport default function RangeButtons() {\n    const classes = useStyles();\n\n    const pack = useSelector((state: AppStoreType) => state.pack);\n    const [hint, setHint] = React.useState<string>(\"Only my cards are displayed\");\n\n    const dispatch = useDispatch();\n\n    const myButtonClickHandler=()=>{\n        dispatch (setUserIdAC(\"6113f19767851c0004b0d0d4\"))\n        dispatch(getAllPack())\n        setHint(\"Only my cards are displayed\")\n    };\n    const allButtonClickHandler=()=>{\n        dispatch (setUserIdAC(\"\"))\n        dispatch(getAllPack())\n        setHint(\"All cards are displayed\")\n    };\n\n    return (\n        <div className={classes.root}>\n            <Grid container>\n                <Typography\n                    variant=\"h3\"\n                    className={classes.privateModeHeader}\n                >\n                    Show pack cards\n                </Typography>\n                <ButtonGroup\n                    variant=\"text\"\n                    color=\"primary\"\n                    aria-label=\"small outlined secondary button group\"\n                    /*aria-label=\"outlined primary button group\"*/\n                    className={classes.privateModeBlock}\n                >\n                    <Button onClick={myButtonClickHandler}\n                        className={classes.modeButton}\n                    >My</Button>\n                    <Button onClick={allButtonClickHandler}\n                        className={classes.modeButton}\n                    >ALL</Button>\n                </ButtonGroup>\n                <Typography\n                    variant=\"h3\"\n                    className={classes.privateModeHeader}\n                >\n                    {hint}\n                </Typography>\n            </Grid>\n        </div>\n    );\n}\n","import React from 'react';\nimport {makeStyles} from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Button from \"@material-ui/core/Button\";\nimport RangeSlider from './RangeSlider' ;\nimport Typography from '@material-ui/core/Typography';\nimport {getAllPack, setUserIdAC} from \"../../../m2-bll/redux/pack-reducer\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppStoreType} from \"../../../m2-bll/redux/store\";\nimport RangeButtons from \"./RangeButtons\";\n\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        flexGrow: 0,\n    },\n    privateModeHeader : {\n        marginBottom : \"20px\",\n    },\n    privateModeBlock : {\n        display: \"flex\",\n        alignItems: \"stretch\",\n        marginBottom : \"40px\",\n    },\n    modeButton : {\n        padding: \"8px 32px\",\n        borderRadius: \"0px\",\n        textAlign: \"center\",\n    },\n    paper: {\n        /*padding: theme.spacing(1),*/\n        /*textAlign: 'left',*/\n        /*color: theme.palette.text.secondary,*/\n        /*height: 600,*/\n        /*backgroundColor: \"#e2dfef\"*/\n    },\n    sliderCaption: {\n        marginBottom : \"40px\",\n        /*padding: theme.spacing(6),*/\n        /*textAlign: 'center',*/\n    },\n}));\n\nexport default function RangeShowCard() {\n    const classes = useStyles();\n\n    const pack = useSelector((state: AppStoreType) => state.pack);\n\n    const dispatch = useDispatch();\n\n    const myButtonClickHandler=()=>{\n        dispatch (setUserIdAC(\"6113f19767851c0004b0d0d4\"))\n        dispatch(getAllPack())\n    };\n    const allButtonClickHandler=()=>{\n        dispatch (setUserIdAC(\"\"))\n        dispatch(getAllPack())\n    };\n\n\n    return (\n        <div className={classes.root}>\n            <Grid container>\n                <RangeButtons/>\n                <Typography\n                    variant=\"h3\"\n                    gutterBottom\n                    className={classes.sliderCaption}\n                >\n                    Number of cards\n                </Typography>\n                <RangeSlider/>\n            </Grid>\n        </div>\n    );\n}\n","import React from \"react\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport TableSortLabel from \"@material-ui/core/TableSortLabel\";\nimport {createStyles, makeStyles, Theme} from \"@material-ui/core/styles\";\nimport {PackDataType} from \"../../../m3-dal/Api\";\nimport {useSelector} from \"react-redux\";\nimport {AppStoreType} from \"../../../m2-bll/redux/store\";\n\ninterface Data {\n    calories: number;\n    carbs: number;\n    fat: number;\n    name: string;\n    protein: number;\n}\n\nexport function descendingComparator<T>(a: T, b: T, orderBy: keyof T) {\n    if (b[orderBy] < a[orderBy]) {\n        return -1;\n    }\n    if (b[orderBy] > a[orderBy]) {\n        return 1;\n    }\n    return 0;\n}\n\ntype Order = 'asc' | 'desc';\n\nfunction getComparator<Key extends keyof any>(\n    order: Order,\n    orderBy: Key,\n): (a: { [key in Key]: number | string }, b: { [key in Key]: number | string }) => number {\n    return order === 'desc'\n        ? (a, b) => descendingComparator(a, b, orderBy)\n        : (a, b) => -descendingComparator(a, b, orderBy);\n}\n\nfunction stableSort<T>(array: T[], comparator: (a: T, b: T) => number) {\n    const stabilizedThis = array.map((el, index) => [el, index] as [T, number]);\n    stabilizedThis.sort((a, b) => {\n        const order = comparator(a[0], b[0]);\n        if (order !== 0) return order;\n        return a[1] - b[1];\n    });\n    return stabilizedThis.map((el) => el[0]);\n}\n\ninterface HeadCell {\n    disablePadding: boolean;\n    id: keyof PackDataType;\n    label: string;\n    numeric: boolean;\n}\n\nconst headCells: HeadCell[] = [\n    {id: 'name', numeric: false, disablePadding: false, label: 'Name'},\n    {id: 'cardsCount', numeric: true, disablePadding: false, label: 'Cards'},\n    {id: 'updated', numeric: true, disablePadding: false, label: 'Last updated'},\n    {id: 'user_name', numeric: true, disablePadding: false, label: 'Created by'},\n];\n\ninterface DeckTableHeaderPropsType {\n    numSelected: number;\n    onRequestSort: (event: React.MouseEvent<unknown>, property: keyof PackDataType) => void;\n    onSelectAllClick?: (event: React.ChangeEvent<HTMLInputElement>) => void;\n    rowCount: number;\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        root: {\n            width: '100%',\n        },\n        paper: {\n            width: '100%',\n            marginBottom: theme.spacing(2),\n        },\n        table: {\n            minWidth: 750,\n        },\n        visuallyHidden: {\n            border: 0,\n            clip: 'rect(0 0 0 0)',\n            height: 1,\n            margin: -1,\n            overflow: 'hidden',\n            padding: 0,\n            position: 'absolute',\n            top: 20,\n            width: 1,\n        },\n    }),\n);\n\n\nconst DeckTableHeader: React.FC<DeckTableHeaderPropsType> = (props) => {\n    const classes = useStyles()\n    const {numSelected, rowCount, onRequestSort} = props;\n    const createSortHandler = (property: keyof PackDataType) => (event: React.MouseEvent<unknown>) => {\n        onRequestSort(event, property);\n    };\n    const {sortField, isSortTypeAscending} = useSelector((state: AppStoreType) => state.pack)\n\n    return (\n        <TableHead>\n            <TableRow>\n                {headCells.map((headCell) => (\n                    <TableCell\n                        key={headCell.id}\n                        align={headCell.numeric ? 'right' : 'left'}\n                        padding={headCell.disablePadding ? 'none' : 'normal'}\n                        sortDirection={isSortTypeAscending ? 'asc' : 'desc'}\n                    >\n                        <TableSortLabel\n                            active={sortField === headCell.id}\n                            direction={isSortTypeAscending ? 'asc' : 'desc'}\n                            onClick={createSortHandler(headCell.id)}\n                        >\n                            {headCell.label}\n                            {sortField === headCell.id ? (\n                                <span className={classes.visuallyHidden}>\n                            {isSortTypeAscending ? 'sorted descending' : 'sorted ascending'}\n                </span>\n                            ) : null}\n                        </TableSortLabel>\n                    </TableCell>\n                ))}\n                <TableCell\n                    align={'center'}\n                >Action</TableCell>\n            </TableRow>\n        </TableHead>\n    );\n}\n\nexport default DeckTableHeader","import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport {Typography} from \"@material-ui/core\";\nimport {createStyles, makeStyles, Theme} from \"@material-ui/core/styles\";\n\nexport interface ModalPropsType {\n    modalTitle: string\n    modalText?: string\n    openStatus: boolean\n    handleCloseModal: (openStatus: boolean) => void\n    modalActionCallback: () => void\n    actionButtonTitle: string\n    children?: JSX.Element\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        root: {\n            flexGrow: 1,\n            width: \"400px\",\n        },\n    }),\n);\n\nconst ModalForm: React.FC<ModalPropsType> = (props) => {\n\n    const classes = useStyles();\n    const {\n        openStatus, handleCloseModal,\n        modalActionCallback, modalTitle, modalText,\n        actionButtonTitle, children\n    } = props\n\n    const handleClose = () => {\n        handleCloseModal && handleCloseModal(false)\n    };\n    const handleAction = () => {\n        modalActionCallback && modalActionCallback()\n        handleCloseModal && handleCloseModal(false)\n    }\n\n    return (\n        <div\n            /*className={classes.root}*/\n        >\n            <Dialog\n                open={openStatus}\n                onClose={handleClose}\n                aria-labelledby=\"alert-dialog-title\"\n                aria-describedby=\"alert-dialog-description\"\n                /*className={classes.root}*/\n            >\n                <div className={classes.root}>\n                    <DialogTitle id=\"alert-dialog-title\">{modalTitle && modalTitle}</DialogTitle>\n                    <DialogContent>\n                        <DialogContentText id=\"alert-dialog-description\">\n                            {modalText && <Typography variant={\"body1\"}>{modalText}</Typography>}\n                            {children}\n                        </DialogContentText>\n                    </DialogContent>\n                    <DialogActions>\n                        <Button onClick={handleClose} color=\"primary\">\n                            Cancel\n                        </Button>\n                        <Button onClick={handleAction} color=\"primary\" autoFocus>\n                            {actionButtonTitle}\n                        </Button>\n                    </DialogActions>\n                </div>\n            </Dialog>\n        </div>\n    );\n}\n\nexport default ModalForm","import React, {useEffect, useState} from 'react';\nimport {createStyles, lighten, makeStyles, Theme} from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport DeckTableHeader from \"./DeckTableHeader\";\nimport {PackDataType, PackUpdateFieldsType} from \"../../../m3-dal/Api\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppStoreType} from \"../../../m2-bll/redux/store\";\nimport {Button, Link} from \"@material-ui/core\";\nimport {\n    deletePackByIdTC,\n    getAllPack,\n    setPackSortType,\n    setPageAC,\n    setPageCountAC, updateCardPack\n} from \"../../../m2-bll/redux/pack-reducer\";\nimport moment from 'moment'\nimport {NavLink} from \"react-router-dom\";\nimport {PATH} from \"../../Routes\";\nimport ModalForm from \"../c9-Modal/ModalForm\";\nimport TextField from \"@material-ui/core/TextField\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        root: {\n            width: '100%',\n        },\n        paper: {\n            width: '100%',\n            marginBottom: theme.spacing(2),\n        },\n        table: {\n            minWidth: 750,\n        },\n        tableRow: {\n            '&:nth-of-type(odd)': {\n                backgroundColor: theme.palette.action.hover,\n            },\n        },\n        visuallyHidden: {\n            border: 0,\n            clip: 'rect(0 0 0 0)',\n            height: 1,\n            margin: -1,\n            overflow: 'hidden',\n            padding: 0,\n            position: 'absolute',\n            top: 20,\n            width: 1,\n        },\n    }),\n);\n\nconst DeckTable: React.FC = () => {\n    const classes = useStyles();\n    const [selected, setSelected] = useState<string[]>([]);\n    const [dense, setDense] = useState(false);\n    const [packName, setPackName] = useState<string | null>(null)\n\n    // Open status of modal for add, delete, edit modals\n    const [modalDeleteStatus, setModalDeleteStatus] = useState<boolean>(false);\n    const [modalEditStatus, setModalEditStatus] = useState<boolean>(false);\n\n\n    const {pack} = useSelector((state: AppStoreType) => state)\n    const {_id} = useSelector((state: AppStoreType) => state.auth)\n    const dispatch = useDispatch()\n\n    const handleRequestSort = (event: React.MouseEvent<unknown>, property: keyof PackDataType) => {\n        dispatch(setPackSortType(!pack.isSortTypeAscending, property))\n    };\n\n    useEffect(() => {\n        dispatch(getAllPack())\n    }, [pack.isSortTypeAscending, pack.sortField, pack.page, pack.pageCount, pack.packName])\n\n    const handleDeletePack = (deckId: string) => {\n        dispatch(deletePackByIdTC(deckId))\n    }\n\n    const handleEditDeck = (deckId: string) => {\n        const updateObjectFileds: PackUpdateFieldsType = {\n            ...(packName && {name: packName}),\n        }\n        dispatch(updateCardPack(deckId, updateObjectFileds))\n    }\n\n    const handleChangePage = (event: unknown, newPage: number) => {\n        dispatch(setPageAC(newPage + 1));\n    };\n\n    const handleChangeRowsPerPage = (event: React.ChangeEvent<HTMLInputElement>) => {\n        dispatch(setPageCountAC(parseInt(event.target.value, 10)))\n        /*setPage(0);*/\n    };\n\n    const handlePackNameChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setPackName(event.target.value)\n    }\n\n    return (\n        <div className={classes.root}>\n            {/*<Button onClick={() => dispatch(deletePackByIdTC(\"6114f04f0030860004fc05a9\"))}>TEST DELETE PACK</Button>*/}\n            <Paper className={classes.paper}>\n                <TableContainer>\n                    <Table\n                        className={classes.table}\n                        aria-labelledby=\"tableTitle\"\n                        size={'small'}\n                        aria-label=\"enhanced table\"\n                    >\n                        <DeckTableHeader\n                            numSelected={selected.length}\n                            onRequestSort={handleRequestSort}\n                            rowCount={pack.cardPacksTotalCount}\n                        />\n                        <TableBody>\n                            {\n                                pack.cardPacks\n                                    .map((deck, index) => {\n                                        const labelId = `enhanced-table-checkbox-${index}`;\n                                        return (\n                                            <TableRow\n                                                role=\"checkbox\"\n                                                tabIndex={-1}\n                                                key={index}\n                                                className={classes.tableRow}\n                                            >\n                                                <TableCell component=\"th\" id={labelId} scope=\"row\" padding=\"normal\">\n                                                    <Link\n                                                        variant={\"body1\"}\n                                                        component={NavLink}\n                                                        to={`${PATH.CARDS}/${deck._id}`}\n                                                        color={\"textPrimary\"}\n                                                    >\n                                                        {deck.name.length > 20 ? deck.name.slice(0, 20) + '...' : deck.name}\n                                                    </Link>\n                                                </TableCell>\n                                                <TableCell align=\"right\">{deck.cardsCount}</TableCell>\n                                                <TableCell\n                                                    align=\"right\">{moment(deck.updated).format(\"DD.MM.YYYY\")}</TableCell>\n                                                <TableCell align=\"right\">{deck.user_name}</TableCell>\n                                                <TableCell align=\"right\">\n                                                    {\n                                                        deck.user_id === _id &&\n                                                        <>\n                                                            <Button\n                                                                onClick={() => {\n                                                                    setModalDeleteStatus(true)\n                                                                }}>Delete</Button>\n                                                            <Button\n                                                                onClick={() => {\n                                                                    setModalEditStatus(true)\n                                                                }\n                                                                }\n                                                            >Edit</Button>\n                                                            <ModalForm\n                                                                modalTitle={\"Edit Pack\"}\n                                                                /*modalText={\"Do you really want to delete pack\"}*/\n                                                                openStatus={modalEditStatus}\n                                                                handleCloseModal={setModalEditStatus}\n                                                                modalActionCallback={() => {\n                                                                    handleEditDeck(deck._id)\n                                                                }}\n                                                                actionButtonTitle={\"Edit\"}\n                                                            >\n                                                                <TextField\n                                                                    value={packName === null ? deck.name : packName}\n                                                                    onChange={handlePackNameChange}\n                                                                    margin=\"dense\"\n                                                                    id=\"packName\"\n                                                                    label=\"Pack name\"\n                                                                    type=\"string\"\n                                                                    fullWidth\n                                                                />\n\n                                                            </ModalForm>\n                                                            <ModalForm\n                                                                modalTitle={\"Delete Pack\"}\n                                                                modalText={\"Do you really want to delete pack\"}\n                                                                openStatus={modalDeleteStatus}\n                                                                handleCloseModal={setModalDeleteStatus}\n                                                                modalActionCallback={() => {\n                                                                    handleDeletePack(deck._id)\n                                                                }}\n                                                                actionButtonTitle={\"Delete\"}\n                                                            />\n                                                        </>\n                                                    }\n                                                    <Button onClick={()=>alert(\"learn\")}>Learn</Button>\n                                                </TableCell>\n                                            </TableRow>\n                                        );\n                                    })}\n                        </TableBody>\n                    </Table>\n                </TableContainer>\n                <TablePagination\n                    rowsPerPageOptions={[5, 10, 15]}\n                    component=\"div\"\n                    // total number of rows from server side\n                    count={pack.cardPacksTotalCount}\n                    // rows per page\n                    rowsPerPage={pack.pageCount}\n                    // current page(starts from 0) from server side - 1\n                    page={pack.page - 1}\n                    onPageChange={handleChangePage}\n                    onRowsPerPageChange={handleChangeRowsPerPage}\n                />\n            </Paper>\n        </div>\n    );\n}\nexport default DeckTable\n","import React, {KeyboardEventHandler, useState} from 'react';\nimport {makeStyles, createStyles, Theme} from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport TextField from \"@material-ui/core/TextField\";\nimport Button from \"@material-ui/core/Button\";\nimport {useDispatch} from \"react-redux\";\nimport {addNewPackTC, setPackNameAC} from \"../../../m2-bll/redux/pack-reducer\";\nimport ModalForm from '../../common/c9-Modal/ModalForm';\n\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        rootGrid: {\n            flexGrow: 1,\n        },\n        search: {\n            display: \"flex\",\n            alignItems: \"stretch\",\n            backgroundColor: \"#e2dfef\"\n        },\n        searchInputBlock: {\n            flexGrow: 3,\n        },\n        addDeckBlock: {\n            marginLeft: \"20px\",\n        }\n    }),\n);\n\nexport default function Search() {\n    const classes = useStyles();\n    const dispatch = useDispatch()\n    const [search, setSearch] = React.useState('');\n    const [type, setType] = useState<string>('')\n    const [name, setName] = useState<string>('first deck updated')\n    const [path, setPath] = useState<string>('')\n    const [grade, setGrade] = useState<number>(0)\n    const [shots, setShots] = useState<number>(0)\n    const [rating, setRating] = useState<number>(0)\n    const [deckCover, setDeckCover] = useState<string>('')\n    const [privateDeck, setPrivateDeck] = useState<boolean>(false)\n    const [modalAddStatus, setModalAddStatus] = useState<boolean>(false);\n    const [packName, setPackName] = useState<string>('')\n\n    const inputHandleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setSearch(event.target.value);\n    };\n\n    const handleAddPAck = () => {\n        if (packName) {\n            let newObject = {\n                name : packName\n            }\n            dispatch(addNewPackTC(newObject))\n        }\n    }\n\n    const handlePackNameChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setPackName(event.target.value)\n    }\n\n    return (\n        <div\n            /*className={classes.rootGrid}*/\n        >\n            <Grid\n                container\n                direction=\"row\"\n                justifyContent=\"flex-start\"\n                alignItems=\"stretch\"\n            >\n                <Grid\n                    item\n                    className={classes.searchInputBlock}\n                >\n                    <TextField\n                        size={\"small\"}\n                        className={classes.search}\n                        style={{backgroundColor: \"#ECECF9\"}}\n                        label=\"Search\"\n                        placeholder=\"Input list name\"\n                        variant=\"outlined\"\n                        onChange={inputHandleChange}\n                        /*onKeyDown={handlePressEnter}*/\n                        onKeyUp={(event) => {\n                            console.log('Event', event)\n                            if (event.key === 'Enter') {\n                                if (!search) {\n                                    dispatch(setPackNameAC(null))\n                                }\n                                console.log('Enter');\n                                dispatch(setPackNameAC(search));\n                                setSearch('');\n                            }\n                        }}\n                    />\n                </Grid>\n                <Grid\n                    item\n                    className={classes.addDeckBlock}\n                >\n                    <Button\n                        variant=\"contained\"\n                        color=\"primary\"\n                        onClick={() => setModalAddStatus(true)}\n                    >\n                        Add new pack\n                    </Button>\n                    <ModalForm\n                        modalTitle={\"Add Pack\"}\n                        modalText={\"Please specify pack name\"}\n                        openStatus={modalAddStatus}\n                        handleCloseModal={setModalAddStatus}\n                        modalActionCallback={() => {\n                            handleAddPAck()\n                        }}\n                        actionButtonTitle={\"Add pack\"}\n                    >\n                        <TextField\n                            value={packName}\n                            onChange={handlePackNameChange}\n                            margin=\"dense\"\n                            id=\"packName\"\n                            label=\"Pack name\"\n                            type=\"string\"\n                            fullWidth\n                        />\n                    </ModalForm>\n                </Grid>\n            </Grid>\n        </div>\n    );\n}\n","import React, {useEffect} from 'react';\nimport {makeStyles} from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport RangeShowCard from './RangeShowCard';\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppStoreType} from \"../../../m2-bll/redux/store\";\n\nimport {Card, Paper} from \"@material-ui/core\";\nimport {Redirect} from \"react-router-dom\";\nimport {PATH} from \"../../Routes\";\nimport {acsessAPI, UserProfileType} from \"../../../m3-dal/Api\";\nimport DeckTable from \"../../common/c8-Table/DeckTable\";\nimport Search from './Search';\nimport Typography from \"@material-ui/core/Typography\";\nimport {authMeTC} from \"../../../m2-bll/redux/auth-reducer\";\n\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        /*flexGrow: 1,*/\n        marginTop: \"40px\",\n        marginBottom: \"40px\",\n    },\n    paper: {\n        margin: 'auto',\n        maxWidth: 1200,\n    },\n    filterBlock: {\n        backgroundColor: \"#ECECF9\",\n        maxWidth: \"250px\",\n        padding: \"30px\",\n        flexGrow: 1,\n    },\n    mainBlock: {\n        width: \"fit-content\",\n        flexGrow: 3,\n        margin: \"30px\",\n        maxWidth: \"950px\",\n        boxSizing : \"border-box\",\n    },\n    mainSearchBlock: {\n        /*flexGrow: 1,*/\n        marginBottom: \"20px\",\n    },\n    mainSearchHeader : {\n        marginBottom: \"20px\",\n    },\n    mainTableBlock: {\n        /*maxWidth: \"500px\",*/\n    }\n}));\n\nexport default function Pack() {\n    const classes = useStyles();\n\n    const {_id} = useSelector((state: AppStoreType) => state.auth);\n    const pack = useSelector((state: AppStoreType) => state.pack);\n    const userProfile = useSelector<AppStoreType, UserProfileType>(state => state.auth)\n    const dispatch = useDispatch();\n\n\n    useEffect(() => {\n        if (!userProfile._id) {\n              dispatch(authMeTC())\n           }\n    }, []);\n\n\n    // if (!userProfile._id) {\n    //     async function f() {\n    //         dispatch(authMeTC())\n    //    }\n    //\n    //     f().then(\n    //      if (!userProfile._id){ Redirect from={PATH.ALL_ROUTES} to=\"/login\"/  }\n    //      );\n    // }\n\n\n\n\n     if (userProfile._id) {\n        return (\n            <div className={classes.root}>\n                <Paper\n                    elevation={4}\n                    className={classes.paper}\n                    square={false}\n                >\n                    <Grid\n                        container\n                        direction=\"row\"\n                        justifyContent=\"flex-start\"\n                        alignItems=\"stretch\"\n                    >\n                        <Grid\n                            item\n                            className={classes.filterBlock}\n                        >\n                            <RangeShowCard/>\n                        </Grid>\n                        <Grid\n                            item\n                            className={classes.mainBlock}\n                        >\n                            <Grid\n                                item\n                                className={classes.mainSearchBlock}\n                                alignItems={\"stretch\"}\n                            >\n                                <Typography\n                                    variant={\"h2\"}\n                                    className={classes.mainSearchHeader}\n                                >\n                                    Packs list\n                                </Typography>\n                                <Search/>\n                            </Grid>\n                            <Grid\n                                item\n                                className={classes.mainTableBlock}\n                                alignItems={\"stretch\"}\n                            >\n                                <DeckTable/>\n                            </Grid>\n                        </Grid>\n                    </Grid>\n                </Paper>\n            </div>\n\n        )\n    } else {\n        return (\n            <Redirect from={PATH.ALL_ROUTES} to=\"/login\"/>\n        )\n    }\n\n}\n","import React from 'react'\nimport {useFormik} from \"formik\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {NavLink, Redirect} from 'react-router-dom';\nimport {PATH} from \"../Routes\";\nimport {AppStoreType} from \"../../m2-bll/redux/store\";\nimport {\n    FormControl,\n    FormGroup,\n    TextField,\n    Button,\n    Grid,\n    makeStyles,\n    Theme,\n    createStyles,\n    Card, Typography, Link\n} from '@material-ui/core'\nimport {registrationThunk} from \"../../m2-bll/redux/auth-reducer\";\n\n\ntype FormikErrorType = {\n    email?: string\n    password?: string\n    cfPassword?: string\n}\n\nconst useStyles = makeStyles<Theme>(theme => createStyles({\n    root: {\n        textAlign: \"center\",\n        padding: \"30px 30px\",\n        /*maxWidth: \"413px\",*/\n        width: \"413px\",\n    },\n    formTitle: {\n        marginBottom: \"30px\",\n    },\n    formSubtitle: {\n        marginBottom: \"40px\",\n    },\n    formDescription: {\n        marginTop: \"20px\",\n        marginBottom: \"40px\",\n    },\n    formLinkTitle: {\n        paddingTop: \"30px\",\n        paddingBottom: \"15px\",\n    },\n\n    displayStretch: {\n        display: \"flex\",\n        alignItems: \"stretch\"\n    },\n    textFieldArea: {\n        margin: \"0px 10px\"\n    },\n    formButtonBlock: {\n        margin: \"0px 35px\",\n        display: \"flex\",\n        alignItems: \"\",\n    },\n    resetButton: {\n        flex: 1,\n        display: \"flex\",\n        alignItems: \"stretch\",\n        marginRight: \"15px\",\n    },\n    submitButton: {\n        flex: 1,\n        display: \"flex\",\n        alignItems: \"stretch\"\n    }\n}))\n\n\nconst SignupPage: React.FC = () => {\n\n\n    const classes = useStyles()\n    const dispatch = useDispatch();\n    const isFetching = useSelector<AppStoreType>(state => state.auth.isFetching);\n\n    const formik = useFormik({\n        initialValues: {\n            email: '',\n            password: '',\n            cfPassword: ''\n        },\n        validate: (values) => {\n            const errors: FormikErrorType = {};\n            if (!values.email) {\n                errors.email = 'Required';\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n                errors.email = 'Invalid email address';\n            }\n            if (!values.password) {\n                errors.password = 'Required';\n            } else if (values.password.length < 7) {\n                errors.password = 'Password must be 7 characters or more'\n            }\n            return errors;\n        },\n        onSubmit: values => {\n            // alert(JSON.stringify(values));\n            if (values.email !== '' && values.password !== '' && values.cfPassword !== '') {\n                if (values.password === values.cfPassword) {\n                    dispatch(registrationThunk(values.email, values.password))\n                    formik.resetForm();\n                }\n            }\n        },\n        // onReset: values =>  {\n        //\n        //     if (values.email !== '' || values.password !== '' || values.cfPassword !== '') {\n        //     formik.resetForm()}\n        // }\n    })\n\n    if (isFetching) {\n        return <Redirect to={PATH.LOGIN}/>\n    }\n\n    return (\n\n        <Grid container\n              justifyContent=\"center\"\n              alignItems=\"center\"\n              style={{minHeight: '100vh'}}\n        >\n            <Grid item>\n                <Card\n                    className={classes.root}\n                >\n                    <form onSubmit={formik.handleSubmit}>\n                        <Typography\n                            variant={\"h1\"}\n                            className={classes.formTitle}\n                        >It-incubator</Typography>\n                        <Typography\n                            variant={\"h2\"}\n                            className={classes.formSubtitle}\n                        >Sign up</Typography>\n                        <FormControl className={classes.displayStretch}>\n                            <FormGroup className={classes.textFieldArea}>\n                                <TextField\n                                    type=\"email\"\n                                    label=\"Email\"\n                                    margin=\"dense\"\n                                    {...formik.getFieldProps('email')}\n                                />\n                                {formik.touched.email && formik.errors.email &&\n                                <div style={{'color': 'red'}}>{formik.errors.email}</div>}\n\n                                <TextField\n                                    type=\"password\"\n                                    label=\"Password\"\n                                    margin=\"dense\"\n                                    {...formik.getFieldProps('password')}\n                                />\n                                {formik.touched.password && formik.errors.password &&\n                                <div style={{'color': 'red'}}>{formik.errors.password}</div>}\n\n                                <TextField\n                                    type=\"password\"\n                                    label=\"Confirm password\"\n                                    margin=\"dense\"\n                                    {...formik.getFieldProps('cfPassword')}\n                                />\n                                {formik.touched.cfPassword && formik.errors.cfPassword &&\n                                <div style={{'color': 'red'}}>{formik.errors.cfPassword}</div>}\n                                <Typography\n                                    variant={\"body1\"}\n                                    className={classes.formDescription}\n                                    style={{marginTop: \"20px\", marginBottom: \"30px\"}}\n                                    align={\"left\"}\n                                >Enter your email address and password</Typography>\n\n                                <div className={classes.formButtonBlock}>\n                                    <Button\n                                        onClick={() => {\n                                            formik.resetForm()\n                                        }}\n                                        className={classes.resetButton}\n                                        type={'reset'}\n                                        variant={'outlined'}\n                                        color={'secondary'}\n                                    >Cancel</Button>\n                                    <Button\n                                        type={'submit'}\n                                        variant={'contained'}\n                                        className={classes.submitButton}\n                                        color={'primary'}\n                                    >Register</Button>\n                                </div>\n                                <Typography\n                                    variant={\"body1\"}\n                                    className={classes.formLinkTitle}\n                                    style={{marginTop: \"0px\", marginBottom: \"15px\"}}\n                                >Already have an account?</Typography>\n                                <Link\n                                    component={NavLink}\n                                    to={PATH.LOGIN}\n                                    color={\"textPrimary\"}\n                                >Log in here\n                                </Link>\n                            </FormGroup>\n                        </FormControl>\n                    </form>\n                </Card>\n            </Grid>\n        </Grid>\n    )\n}\nexport default SignupPage","import {\n    acsessAPI,\n    CardType, GetCardQueryFields,\n    GetCardQueryType,\n    GetPackQueryParamsType,\n    NewPackObjectDataType,\n    PackDataType,\n    PackResponseDataType,\n    PackUpdateObjectType,\n    PostCardFieldsType,\n    PostCardQueryType,\n    UpdateCardFieldsType,\n    UpdateCardQueryType\n} from \"../../m3-dal/Api\";\nimport {AppStatusType, setAppStatusAC, setMessageErrorAC} from \"./app-reducer\";\nimport {AnyAction, Dispatch} from \"redux\";\nimport store from '../redux/store'\n\n\nimport {ThunkDispatch} from \"redux-thunk\";\nimport {AppStoreType} from \"./store\";\n\nexport enum ACTIONS_TYPE {\n    SET_CARDS_ARRAY = 'CardReducer/SET_CARDS_ARRAY',\n    SET_PACK_USER_ID = 'CardReducer/SET_PACK_USER_ID',\n    SET_SORT_FIELD = 'CardReducer/SET_SORT_FIELD',\n    SET_SORT_ASC = 'CardReducer/SET_SET_SORT_ASC',\n    SET_PAGE = 'CardReducer/SET_PAGE',\n    SET_PAGE_COUNT = 'CardReducer/SET_PAGE_COUNT',\n    SET_CARDS_TOTAL_COUNT = 'CardReducer/SET_CARDS_TOTAL_COUNT',\n    SET_MIN_GRADE = 'CardReducer/SET_MIN_GRADE',\n    SET_MAX_GRADE = 'CardReducer/SET_MAX_GRADE',\n}\n\nexport interface InitialCardStateType {\n    cards: Array<CardType>\n    // current Pack id\n    packUserId: string\n    // for sort card in table\n    isSortTypeAscending: boolean\n    sortField: keyof CardType | null\n    // for pagination\n    page: number | null\n    pageCount: number | null\n    cardsTotalCount: number | null\n    // card grade\n    minGrade: number | null\n    maxGrade: number | null\n}\n\nconst initialCardState: InitialCardStateType = {\n    cards: [],\n    packUserId: '',\n    // Get card Query parameter\n    sortField: 'question',\n    isSortTypeAscending: false,\n    page: null,\n    pageCount: 5,\n    cardsTotalCount: null,\n    minGrade: null,\n    maxGrade: null\n}\n\n\nexport const cardReducer = (state: InitialCardStateType = initialCardState, action: CombinedActionType): InitialCardStateType => {\n    /*console.log('action type', action.type)*/\n    /*console.log('action payload', action.payload)*/\n\n    switch (action.type) {\n        case ACTIONS_TYPE.SET_CARDS_ARRAY:\n        case ACTIONS_TYPE.SET_PACK_USER_ID:\n        case ACTIONS_TYPE.SET_SORT_FIELD:\n        case ACTIONS_TYPE.SET_SORT_ASC:\n        case ACTIONS_TYPE.SET_PAGE:\n        case ACTIONS_TYPE.SET_PAGE_COUNT:\n        case ACTIONS_TYPE.SET_CARDS_TOTAL_COUNT:\n        case ACTIONS_TYPE.SET_MIN_GRADE:\n        case ACTIONS_TYPE.SET_MAX_GRADE:\n            return {\n                ...state,\n                ...action.payload,\n            }\n        default:\n            return state;\n    }\n};\nexport type CombinedActionType =\n    SetCardsArrayType | SetPackUserId |\n    SetSortFieldType | SetIsSortAscType |\n    SetPageType | SetPageCountType |\n    SetCardsTotalCountType | SetMinGradeType |\n    SetMaxGradeType\n\nexport type SetCardsArrayType = ReturnType<typeof setCardsArrayAC>\nexport type SetPackUserId = ReturnType<typeof setPackUserIdAC>\nexport type SetSortFieldType = ReturnType<typeof setSortFieldAC>\nexport type SetIsSortAscType = ReturnType<typeof setSortDirectionAscAC>\nexport type SetPageType = ReturnType<typeof setPageAC>\n\nexport type SetPageCountType = ReturnType<typeof setPageCountAC>\nexport type SetCardsTotalCountType = ReturnType<typeof setCardsTotalCountAC>\nexport type SetMinGradeType = ReturnType<typeof setMinGradeAC>\nexport type SetMaxGradeType = ReturnType<typeof setMaxGradeAC>\n\nexport const setMaxGradeAC = (maxGrade: number) => ({\n    type: ACTIONS_TYPE.SET_MAX_GRADE,\n    payload: {\n        maxGrade\n    }\n})\n\nexport const setMinGradeAC = (minGrade: number) => ({\n    type: ACTIONS_TYPE.SET_MIN_GRADE,\n    payload: {\n        minGrade\n    }\n})\n\nexport const setCardsTotalCountAC = (cardsTotalCount: number) => ({\n    type: ACTIONS_TYPE.SET_CARDS_TOTAL_COUNT,\n    payload: {\n        cardsTotalCount\n    }\n})\n\nexport const setPageCountAC = (pageCount: number) => ({\n    type: ACTIONS_TYPE.SET_PAGE_COUNT,\n    payload: {\n        pageCount\n    }\n})\n\nexport const setPageAC = (page: number) => ({\n    type: ACTIONS_TYPE.SET_PAGE,\n    payload: {\n        page\n    }\n})\n\nexport const setSortDirectionAscAC = (isSortTypeAscending: boolean) => ({\n    type: ACTIONS_TYPE.SET_SORT_ASC,\n    payload: {\n        isSortTypeAscending\n    }\n})\n\nexport const setSortFieldAC = (sortField: keyof CardType) => ({\n    type: ACTIONS_TYPE.SET_SORT_FIELD,\n    payload: {\n        sortField\n    }\n})\n\nexport const setPackUserIdAC = (packUserId: string) => ({\n    type: ACTIONS_TYPE.SET_PACK_USER_ID,\n    payload: {\n        packUserId\n    }\n})\n\nexport const setCardsArrayAC = (cards: Array<CardType>) => ({\n    type: ACTIONS_TYPE.SET_CARDS_ARRAY,\n    payload: {\n        cards\n    }\n})\n\n\nexport const getAllCardsTS = (packId: string, searchFields?: GetCardQueryFields) => {\n    return (dispatch: Dispatch, getState: () => AppStoreType) => {\n        dispatch(setAppStatusAC('loading'))\n        // create sort field\n        let sortCards\n        // get query paramas from store\n        let {\n            page, pageCount, minGrade,\n            maxGrade, cardsTotalCount,\n            sortField, isSortTypeAscending\n        } = getState().card;\n\n        if (sortField) {\n            sortCards = +isSortTypeAscending + sortField;\n        }\n        // create query object\n        const cardsQueryObject: GetCardQueryType = {\n            params: {\n                cardsPack_id: packId,\n                ...(page !== null && {page}),\n                ...(pageCount !== null && {pageCount}),\n                ...(minGrade !== null && {min: minGrade}),\n                ...(maxGrade !== null && {max: maxGrade}),\n                ...(cardsTotalCount !== null && {cardsTotalCount}),\n                ...(sortCards && {sortCards}),\n                ...(searchFields && searchFields)\n            }\n        }\n        acsessAPI.getAllCards(cardsQueryObject)\n            .then(res => {\n                if (res.data && res.data.cards.length > 0) {\n                    dispatch(setCardsArrayAC(res.data.cards))\n                } else {\n                    dispatch(setCardsArrayAC([]))\n                }\n                dispatch(setPageAC(res.data.page))\n                dispatch(setPageCountAC(res.data.pageCount))\n                dispatch(setCardsTotalCountAC(res.data.cardsTotalCount))\n                dispatch(setPackUserIdAC(res.data.packUserId))\n                dispatch(setMinGradeAC(res.data.minGrade))\n                dispatch(setMaxGradeAC(res.data.maxGrade))\n                dispatch(setAppStatusAC('succeeded'))\n            })\n            .catch(error => {\n                dispatch(setAppStatusAC('failed'))\n                dispatch(setMessageErrorAC('Something went wrong'))\n            })\n    }\n}\n\nexport const deleteCardByIdTC = (id: string) => {\n    return (dispatch: ThunkDispatch<AppStoreType, {}, AnyAction>, getState: () => AppStoreType) => {\n        dispatch(setAppStatusAC('loading'))\n        acsessAPI.deleteCardByID(id)\n            .then(res => {\n                dispatch(setAppStatusAC('succeeded'))\n                dispatch(getAllCardsTS(getState().card.packUserId))\n            })\n            .catch(err => {\n                console.log(err)\n                dispatch(setAppStatusAC('failed'))\n            })\n    }\n}\n\nexport const addNewCardTC = (packId: string, newCardFields: PostCardFieldsType) => {\n    return (dispatch: ThunkDispatch<AppStoreType, {}, AnyAction>, getState: () => AppStoreType) => {\n        // Combine post object from state\n        const newCardObject: PostCardQueryType = {\n            card: {\n                cardsPack_id: packId,\n                ...newCardFields\n            }\n        }\n        dispatch(setAppStatusAC('loading'))\n        acsessAPI.postCard(newCardObject)\n            .then(res => {\n                dispatch(setAppStatusAC('succeeded'));\n                dispatch(getAllCardsTS(packId));\n            })\n            .catch(err => {\n                console.log(err)\n                dispatch(setAppStatusAC('failed'))\n            })\n    }\n}\n\nexport const updateCardTC = (_id: string, updatedCardFields: UpdateCardFieldsType) => {\n    return (dispatch: ThunkDispatch<AppStoreType, {}, AnyAction>, getState: () => AppStoreType) => {\n        let updatedCardQuery: UpdateCardQueryType = {\n            card: {\n                _id,\n                ...updatedCardFields\n            }\n        }\n        dispatch(setAppStatusAC('loading'))\n        acsessAPI.updateCardById(updatedCardQuery)\n            .then(res => {\n                dispatch(setAppStatusAC('succeeded'))\n                dispatch(getAllCardsTS(getState().card.packUserId))\n            })\n            .catch(err => {\n                console.log(err)\n                dispatch(setAppStatusAC('failed'))\n            })\n    }\n}\n","import React from \"react\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport TableSortLabel from \"@material-ui/core/TableSortLabel\";\nimport {createStyles, makeStyles, Theme} from \"@material-ui/core/styles\";\nimport {CardType, PackDataType} from \"../../../m3-dal/Api\";\nimport {useSelector} from \"react-redux\";\nimport {AppStoreType} from \"../../../m2-bll/redux/store\";\n\ninterface Data {\n    calories: number;\n    carbs: number;\n    fat: number;\n    name: string;\n    protein: number;\n}\n\nexport function descendingComparator<T>(a: T, b: T, orderBy: keyof T) {\n    if (b[orderBy] < a[orderBy]) {\n        return -1;\n    }\n    if (b[orderBy] > a[orderBy]) {\n        return 1;\n    }\n    return 0;\n}\n\ntype Order = 'asc' | 'desc';\n\nfunction getComparator<Key extends keyof any>(\n    order: Order,\n    orderBy: Key,\n): (a: { [key in Key]: number | string }, b: { [key in Key]: number | string }) => number {\n    return order === 'desc'\n        ? (a, b) => descendingComparator(a, b, orderBy)\n        : (a, b) => -descendingComparator(a, b, orderBy);\n}\n\nfunction stableSort<T>(array: T[], comparator: (a: T, b: T) => number) {\n    const stabilizedThis = array.map((el, index) => [el, index] as [T, number]);\n    stabilizedThis.sort((a, b) => {\n        const order = comparator(a[0], b[0]);\n        if (order !== 0) return order;\n        return a[1] - b[1];\n    });\n    return stabilizedThis.map((el) => el[0]);\n}\n\ninterface HeadCell {\n    disablePadding: boolean;\n    id: keyof CardType;\n    label: string;\n    numeric: boolean;\n}\n\nconst headCells: HeadCell[] = [\n    {id: 'question', numeric: false, disablePadding: false, label: 'Question'},\n    {id: 'answer', numeric: false, disablePadding: false, label: 'Answer'},\n    {id: 'updated', numeric: true, disablePadding: false, label: 'Last updated'},\n    {id: 'grade', numeric: true, disablePadding: false, label: 'Grade'},\n];\n\ninterface DeckTableHeaderPropsType {\n    numSelected: number;\n    onRequestSort: (event: React.MouseEvent<unknown>, property: keyof CardType) => void;\n    onSelectAllClick?: (event: React.ChangeEvent<HTMLInputElement>) => void;\n    rowCount: number;\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        root: {\n            width: '100%',\n        },\n        paper: {\n            width: '100%',\n            marginBottom: theme.spacing(2),\n        },\n        table: {\n            minWidth: 750,\n        },\n        visuallyHidden: {\n            border: 0,\n            clip: 'rect(0 0 0 0)',\n            height: 1,\n            margin: -1,\n            overflow: 'hidden',\n            padding: 0,\n            position: 'absolute',\n            top: 20,\n            width: 1,\n        },\n    }),\n);\n\n\nconst CardTableHeader: React.FC<DeckTableHeaderPropsType> = (props) => {\n    const classes = useStyles()\n    const {numSelected, rowCount, onRequestSort} = props;\n    const createSortHandler = (property: keyof CardType) => (event: React.MouseEvent<unknown>) => {\n        onRequestSort(event, property);\n    };\n    const {sortField, isSortTypeAscending} = useSelector((state: AppStoreType) => state.pack)\n\n    return (\n        <TableHead>\n            <TableRow>\n                {headCells.map((headCell) => (\n                    <TableCell\n                        key={headCell.id}\n                        align={headCell.numeric ? 'right' : 'left'}\n                        padding={headCell.disablePadding ? 'none' : 'normal'}\n                        sortDirection={isSortTypeAscending ? 'asc' : 'desc'}\n                    >\n                        <TableSortLabel\n                            active={sortField === headCell.id}\n                            direction={isSortTypeAscending ? 'asc' : 'desc'}\n                            onClick={createSortHandler(headCell.id)}\n                        >\n                            {headCell.label}\n                            {sortField === headCell.id ? (\n                                <span className={classes.visuallyHidden}>\n                            {isSortTypeAscending ? 'sorted descending' : 'sorted ascending'}\n                </span>\n                            ) : null}\n                        </TableSortLabel>\n                    </TableCell>\n                ))}\n                {/*<TableCell\n                    align={'center'}\n                >Action</TableCell>*/}\n            </TableRow>\n        </TableHead>\n    );\n}\n\nexport default CardTableHeader","import React, {useEffect} from 'react';\nimport {createStyles, lighten, makeStyles, Theme} from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport {useDispatch, useSelector} from \"react-redux\";\nimport moment from 'moment'\nimport {\n    getAllCardsTS,\n    setPageAC,\n    setPageCountAC,\n    setSortDirectionAscAC,\n    setSortFieldAC\n} from '../../../m2-bll/redux/card-reducer';\nimport {AppStoreType} from '../../../m2-bll/redux/store';\nimport {CardType} from \"../../../m3-dal/Api\";\nimport {useParams} from \"react-router-dom\";\nimport CardTableHeader from './CardTableHeader';\nimport {Button, TablePagination} from \"@material-ui/core\";\nimport {deletePackByIdTC} from \"../../../m2-bll/redux/pack-reducer\";\n\nfunction descendingComparator<T>(a: T, b: T, orderBy: keyof T) {\n    if (b[orderBy] < a[orderBy]) {\n        return -1;\n    }\n    if (b[orderBy] > a[orderBy]) {\n        return 1;\n    }\n    return 0;\n}\n\ntype Order = 'asc' | 'desc';\n\nfunction getComparator<Key extends keyof any>(\n    order: Order,\n    orderBy: Key,\n): (a: { [key in Key]: number | string }, b: { [key in Key]: number | string }) => number {\n    return order === 'desc'\n        ? (a, b) => descendingComparator(a, b, orderBy)\n        : (a, b) => -descendingComparator(a, b, orderBy);\n}\n\n/*function stableSort<T>(array: T[], comparator: (a: T, b: T) => number) {\n    const stabilizedThis = array.map((el, index) => [el, index] as [T, number]);\n    stabilizedThis.sort((a, b) => {\n        const order = comparator(a[0], b[0]);\n        if (order !== 0) return order;\n        return a[1] - b[1];\n    });\n    return stabilizedThis.map((el) => el[0]);\n}*/\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        root: {\n            width: '100%',\n        },\n        paper: {\n            width: '100%',\n            marginBottom: theme.spacing(2),\n        },\n        table: {\n            minWidth: 750,\n        },\n        tableRow: {\n            '&:nth-of-type(odd)': {\n                backgroundColor: theme.palette.action.hover,\n            },\n        },\n        visuallyHidden: {\n            border: 0,\n            clip: 'rect(0 0 0 0)',\n            height: 1,\n            margin: -1,\n            overflow: 'hidden',\n            padding: 0,\n            position: 'absolute',\n            top: 20,\n            width: 1,\n        },\n    }),\n);\n\nconst CardTable: React.FC = () => {\n    const classes = useStyles();\n    const [order, setOrder] = React.useState<Order>('asc');\n    const [selected, setSelected] = React.useState<string[]>([]);\n    const [page, setPage] = React.useState(0);\n    const [dense, setDense] = React.useState(false);\n    const {packId} = useParams<{ packId: string }>()\n\n    const {card} = useSelector((state: AppStoreType) => state)\n    console.log('packId', packId)\n    console.log('card', card)\n\n    const {_id} = useSelector((state: AppStoreType) => state.auth)\n    const dispatch = useDispatch()\n\n    const handleRequestSort = (event: React.MouseEvent<unknown>, property: keyof CardType) => {\n        dispatch(setSortDirectionAscAC(!card.isSortTypeAscending))\n        dispatch(setSortFieldAC(property))\n    };\n\n    useEffect(() => {\n            dispatch(getAllCardsTS(packId))\n        }, [\n            card.isSortTypeAscending, card.sortField,\n            card.page, card.pageCount, card.page\n        ]\n    )\n\n\n    const handleChangePage = (event: unknown, newPage: number) => {\n        dispatch(setPageAC(newPage + 1));\n    };\n\n    const handleChangeRowsPerPage = (event: React.ChangeEvent<HTMLInputElement>) => {\n        dispatch(setPageCountAC(parseInt(event.target.value, 10)))\n        /*setPage(0);*/\n    };\n\n    const handleChangeDense = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setDense(event.target.checked);\n    };\n\n    return (\n        <div className={classes.root}>\n            <Paper className={classes.paper}>\n                <TableContainer>\n                    <Table\n                        className={classes.table}\n                        aria-labelledby=\"tableTitle\"\n                        /*size={dense ? 'small' : 'medium'}*/\n                        size={'small'}\n                        aria-label=\"enhanced table\"\n                    >\n                        <CardTableHeader\n                            numSelected={selected.length}\n                            /*onSelectAllClick={handleSelectAllClick}*/\n                            onRequestSort={handleRequestSort}\n                            rowCount={card.cardsTotalCount || 0}\n                        />\n                        <TableBody>\n                            {\n                                card.cards.length > 0 && card.cards\n                                    .map((card, index) => {\n                                        /*const isItemSelected = isSelected(deck.name);*/\n                                        const labelId = `enhanced-table-checkbox-${index}`;\n                                        return (\n                                            <TableRow\n                                                /*hover*/\n                                                /*onClick={(event) => handleClick(event, pack.name)}*/\n                                                role=\"checkbox\"\n                                                /*aria-checked={isItemSelected}*/\n                                                tabIndex={-1}\n                                                key={index}\n                                                /*selected={isItemSelected}*/\n                                                className={classes.tableRow}\n                                            >\n                                                <TableCell component=\"th\" id={labelId} scope=\"row\" padding=\"normal\">\n                                                    {card.question.length > 20 ? card.question.slice(0, 20) + '...' : card.question}\n                                                </TableCell>\n                                                <TableCell align=\"left\">\n                                                    {card.answer.length > 20 ? card.answer.slice(0, 20) + '...' : card.answer}\n                                                </TableCell>\n                                                <TableCell\n                                                    align=\"right\">{moment(card.updated).format(\"DD.MM.YYYY\")}\n                                                </TableCell>\n                                                <TableCell align=\"right\">{card.grade}</TableCell>\n                                                {\n                                                    card.user_id === _id &&\n                                                    <>\n                                                        <Button>Edit</Button>\n                                                    </>\n                                                }\n                                            </TableRow>\n                                        );\n                                    })}\n                        </TableBody>\n                    </Table>\n                </TableContainer>\n                <TablePagination\n                    rowsPerPageOptions={[5, 10, 15]}\n                    component=\"div\"\n                    // total number of rows from server side\n                    count={card.cardsTotalCount || 0}\n                    // rows per page\n                    rowsPerPage={card.pageCount || 5}\n                    // current page(starts from 0) from server side - 1\n                    page={(card.page && (card.page - 1)) || 0}\n                    onPageChange={handleChangePage}\n                    onRowsPerPageChange={handleChangeRowsPerPage}\n                />\n            </Paper>\n        </div>\n    );\n}\nexport default CardTable","import React, {KeyboardEventHandler, useState} from 'react';\nimport {makeStyles, createStyles, Theme} from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport TextField from \"@material-ui/core/TextField\";\nimport Button from \"@material-ui/core/Button\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {addNewPackTC, setPackNameAC} from \"../../../m2-bll/redux/pack-reducer\";\nimport {NewPackFieldsType, NewPackObjectDataType} from \"../../../m3-dal/Api\";\nimport {getAllCardsTS} from \"../../../m2-bll/redux/card-reducer\";\nimport {AppStoreType} from \"../../../m2-bll/redux/store\";\nimport ModalForm from \"../../common/c9-Modal/ModalForm\";\n\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        rootGrid: {\n            flexGrow: 1,\n        },\n        search: {\n            display: \"flex\",\n            alignItems: \"stretch\",\n            /*marginRight: 40,*/\n            backgroundColor: \"#e2dfef\"\n        },\n        searchInputBlock: {\n            flexGrow: 3,\n        },\n        addDeckBlock: {\n            marginLeft: \"20px\",\n        }\n    }),\n);\n\nexport interface SearchCardPropsType {\n    packId: string\n}\n\nconst SearchCard: React.FC<SearchCardPropsType> = (props) => {\n    const classes = useStyles();\n    const dispatch = useDispatch()\n    const {packUserId} = useSelector((state: AppStoreType) => state.card)\n    const [search, setSearch] = React.useState<string>('');\n    const {_id} = useSelector((state: AppStoreType) => state.auth);\n    const [modalAddStatus, SetModalCardStatus] = useState<boolean>(false);\n    const [answer, setAnswer] = useState<string>('');\n    const [question, setQuestion] = useState<string>('');\n\n    const inputHandleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setSearch(event.target.value);\n    };\n\n    const handleAnswer = () => {\n\n    }\n    const questionAnswer = () => {\n\n    }\n\n    return (\n        <div\n            className={classes.rootGrid}\n        >\n            <Grid\n                container\n                direction=\"row\"\n                justifyContent=\"flex-start\"\n                alignItems=\"stretch\"\n            >\n                <Grid\n                    item\n                    className={classes.searchInputBlock}\n                >\n                    <TextField\n                        size={\"small\"}\n                        className={classes.search}\n                        style={{backgroundColor: \"#ECECF9\"}}\n                        label=\"Search\"\n                        placeholder=\"Input list name\"\n                        variant=\"outlined\"\n                        onChange={inputHandleChange}\n                        /*onKeyDown={handlePressEnter}*/\n                        onKeyUp={(event) => {\n                            console.log('Event', event)\n                            if (event.key === 'Enter') {\n                                /*if (!search) {\n                                    dispatch(getAllCardsTS(props.packId, { cardQuestion : search}))\n                                }*/\n                                dispatch(getAllCardsTS(props.packId, {cardQuestion: search}))\n                                setSearch('');\n                            }\n                        }}\n                    />\n                </Grid>\n                {\n                    packUserId === _id &&\n                    <Grid\n                        item\n                        className={classes.addDeckBlock}\n                    >\n                        <Button\n                            variant=\"contained\"\n                            color=\"primary\"\n                            /*onClick={() => modalAddStatus(true)}*/\n                        >\n                            Add new pack\n                        </Button>\n                    </Grid>\n                }\n            </Grid>\n            <ModalForm\n                modalTitle={\"Add Card\"}\n                modalText={\"Please specify answer and question name\"}\n                openStatus={modalAddStatus}\n                handleCloseModal={SetModalCardStatus}\n                modalActionCallback={() => {\n                    /*handleAddPAck()*/\n                }}\n                actionButtonTitle={\"Add pack\"}\n            >\n                <div>\n                    <TextField\n                        value={answer}\n                        onChange={handleAnswer}\n                        margin=\"dense\"\n                        id=\"answer\"\n                        label=\"Answer\"\n                        type=\"string\"\n                        fullWidth\n                    />\n                    <TextField\n                        value={question}\n                        onChange={questionAnswer}\n                        margin=\"dense\"\n                        id=\"answer\"\n                        label=\"Answer\"\n                        type=\"string\"\n                        fullWidth\n                    />\n                </div>\n            </ModalForm>\n        </div>\n    );\n}\n\nexport default SearchCard","import React, {useEffect} from 'react';\nimport {makeStyles} from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport {Button, IconButton, Paper} from \"@material-ui/core\";\nimport Typography from \"@material-ui/core/Typography\";\nimport CardTable from \"./CardTable\";\nimport SearchCard from './SearchCard';\nimport {Redirect, useHistory, useParams} from \"react-router-dom\";\nimport {PATH} from \"../../Routes\";\nimport {ArrowBackIos} from \"@material-ui/icons\";\nimport {useSelector} from \"react-redux\";\nimport {AppStoreType} from \"../../../m2-bll/redux/store\";\n\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        flexGrow: 1,\n        marginTop: \"40px\",\n        marginBottom: \"40px\",\n        maxWidth: 1200,\n        margin: 'auto',\n    },\n    paper: {\n        padding: '25px',\n    },\n\n    mainBlock: {\n        width: \"fit-content\",\n        margin: \"30px\",\n        boxSizing: \"border-box\",\n    },\n    mainSearchBlock: {\n        marginBottom: \"20px\",\n    },\n    mainSearchHeader: {\n        marginBottom: \"20px\",\n    },\n    mainTableBlock: {\n        /*maxWidth: \"500px\",*/\n    }\n}));\n\nconst CardPage: React.FC = () => {\n    const classes = useStyles();\n    const {packId} = useParams<{ packId: string }>()\n    const history = useHistory()\n    const {cardPacks} = useSelector((state: AppStoreType) => state.pack)\n\n    const packName = () => {\n        if (cardPacks.length > 0 && packId) {\n            const packObjectFromState = cardPacks.find(pack => pack._id === packId)\n            const getObjectName: string | undefined = packObjectFromState?.name;\n            if (getObjectName) {\n                return getObjectName?.length > 20 ? getObjectName.slice(0, 20) + '...' : getObjectName\n            }\n        }\n    }\n\n\n    return (\n        <div className={classes.root}>\n            <Paper\n                elevation={4}\n                className={classes.paper}\n                square={false}\n            >\n                <Grid\n                    container\n                    direction=\"column\"\n                    justifyContent=\"flex-start\"\n                    alignItems=\"stretch\"\n                >\n\n                    <Grid\n                        item\n                        className={classes.mainSearchBlock}\n                        alignItems={\"stretch\"}\n                    >\n                        {/*<Button\n                            color=\"inherit\"\n                            style={{ display  : \"inline-block\"}}\n                            onClick={() => <Redirect to={PATH.TEST_PAGE}/>}>\n                            Back</Button>*/}\n\n                        <Typography\n                            variant={\"h2\"}\n                            className={classes.mainSearchHeader}\n                        >\n                            <IconButton\n                                onClick={() => {\n                                    history.push(PATH.PACK)\n                                }}\n                            >\n                                <ArrowBackIos/>\n                            </IconButton>\n                            {(packName && packName()) || 'PackName'}\n                        </Typography>\n                        <SearchCard packId={packId}/>\n                    </Grid>\n                    <Grid\n                        item\n                        className={classes.mainTableBlock}\n                    >\n                        <CardTable/>\n                    </Grid>\n                </Grid>\n            </Paper>\n        </div>\n    );\n}\n\nexport default CardPage","import React from 'react'\nimport {Redirect, Switch, Route} from 'react-router-dom'\nimport LoginPage from './Pages/LoginPage'\nimport ProfilePage from \"./Pages/ProfilePage\";\nimport NotFoundPage from \"./Pages/NotFoundPage\";\nimport RestorePassPage from \"./Pages/RestorePassPage\";\nimport NewPassPage from \"./Pages/NewPassPage\";\nimport TestPage from \"./Pages/TestPage\";\nimport RestorePassCheckEmailPage from \"./Pages/RestorePassCheckEmailPage\";\nimport Loading from \"./common/c7-Progress/Loading\";\nimport Packs from \"./Pages/Pack/Packs\";\nimport Cards from \"./Pages/Cards/Packs\";\nimport SignupPage from \"./Pages/SignupPage\";\nimport CardTable from \"./Pages/Cards/CardTable\";\nimport CardPage from \"./Pages/Cards/CardPage\";\n\n\n\nexport const PATH = {\n    LOGIN: '/login',\n    SIGNUP: '/signup',\n    PROFILE: '/profile',\n    NOTFOUND: '/404',\n    RESTORE_PASS: '/restore',\n    RESTORE_PASS_CHECK_EMAIL: '/check_email',\n    NEW_PASS: '/set-new-password',\n    PACK: '/pack',\n    CARDS: '/cards',\n    TEST_PAGE: '/test_page',\n    ALL_ROUTES : '*',\n}\n\nconst  Routes : React.FC = ()  => {\n\n    console.log('Routes App' )\n    return (\n        <div>\n            {/*Switch выбирает первый подходящий роут*/}\n            <Switch>\n\n                {/*в начале мы попадаем на страницу '/' и переходим сразу на страницу PROFILE*/}\n                {/*exact нужен чтоб указать полное совподение (что после '/' ничего не будет)*/}\n                <Route path={'/'} exact render={() => <Redirect to={PATH.PROFILE}/>}/>\n\n                <Route path={PATH.LOGIN} exact render={() => <LoginPage/>}/>\n                <Route path={PATH.SIGNUP} exact render={() => <SignupPage/>}/>\n                <Route path={PATH.PROFILE} render={() => <ProfilePage/>}/>\n                <Route path={PATH.RESTORE_PASS} render={() => <RestorePassPage/>}/>\n                <Route path={PATH.RESTORE_PASS_CHECK_EMAIL} render={() => <RestorePassCheckEmailPage/>}/>\n                <Route path={PATH.NEW_PASS + '/:token'} component={NewPassPage}/>\n                {/*<Route path={PATH.DESTINATION_LIST_PAGE + '/:id'} exact={true} component={DestinationProfileContainer} />*/}\n                <Route path={PATH.TEST_PAGE} render={() => <Loading message={\"Wait a minute please\"}/>}/>\n                <Route path={PATH.PACK} render={() => <Packs/>}/>\n                <Route path={PATH.CARDS + '/:packId'}  component={CardPage}/>\n                <Route path={\"/NotFoundPage\"} render={() => <NotFoundPage/>}/>\n                <Redirect from={PATH.ALL_ROUTES} to={\"NotFoundPage\"}/>\n                {/*<Route render={() => <LoginPage/>}/>*/}\n            </Switch>\n\n\n                {/*у этого роута нет пути, он отрисуется если пользователь захочет попасть на несуществующую страницу*/}\n                {/*если бы не было path={PATH.ALL_ROUTES} render={() => */}\n\n\n        </div>\n    )\n}\n\nexport default Routes\n","import React from 'react'\nimport {NavLink, useHistory, useParams} from 'react-router-dom'\nimport s from './Header.module.css'\nimport {PATH} from \"../Routes\";\nimport {\n    AppBar,\n    Button, createStyles,\n    IconButton,\n    LinearProgress,\n    Link, List,\n    ListItem,\n    ListItemIcon, ListItemText,\n    makeStyles,\n    Theme,\n    Toolbar,\n    Typography\n} from \"@material-ui/core\";\nimport {Menu} from \"@material-ui/icons\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppStoreType} from \"../../m2-bll/redux/store\";\nimport CardsIcon from \"../common/icons/CardsIcon\";\nimport ProfileIcon from \"../common/icons/ProfileIcon\";\nimport { logoutTC } from '../../m2-bll/redux/auth-reducer';\n\nconst useStyles = makeStyles<Theme>(theme => createStyles({\n    root: {\n        backgroundColor: \"#EBE0E9\",\n\n    },\n    listBlock : {\n        display : \"flex\",\n        flexDirection: \"row\"\n    },\n    iconBlock : {\n    },\n    menuItem: {\n        color: \"#2D2E46\",\n    }\n}))\n\nconst Header: React.FC = () => {\n    const {appStatus} = useSelector((state: AppStoreType) => state.app)\n    const history = useHistory()\n    const classes = useStyles()\n    const dispatch = useDispatch()\n    const isLoggedIn = useSelector<AppStoreType, boolean>((state) => state.auth.isLoggedIn)\n\n\n    return (\n        <div>\n            <AppBar\n                position=\"static\"\n                className={classes.root}\n            >\n                <Toolbar>\n                    <IconButton\n                        edge=\"start\"\n                        aria-label=\"menu\"\n                        className={classes.itemMenu}\n                    >\n                        <Menu/>\n                    </IconButton>\n                    <Typography variant=\"h1\">\n                        It-Incubator\n                    </Typography>\n                    <div>\n                        {!isLoggedIn\n                            ? <Button\n                                color=\"inherit\"\n                                className={classes.menuItem}\n                                onClick={() => history.push(PATH.LOGIN)}\n                            >Login</Button>\n                            :   <Button\n                                color=\"inherit\"\n                                className={classes.menuItem}\n                                onClick={() =>  dispatch(logoutTC())}\n                            >Log out</Button>}\n\n                        <Button\n                            color=\"inherit\"\n                            className={classes.menuItem}\n                            onClick={() => history.push(PATH.SIGNUP)}\n                        >Sign up</Button>\n                        <Button\n                            color=\"inherit\"\n                            className={classes.menuItem}\n                            onClick={() => history.push(PATH.PROFILE)}\n                        >Profile</Button>\n                        <Button\n                            color=\"inherit\"\n                            className={classes.menuItem}\n                            onClick={() => history.push(PATH.RESTORE_PASS)}\n                        >Restore Pass</Button>\n                        <Button\n                            color=\"inherit\"\n                            className={classes.menuItem}\n                            onClick={() => history.push(PATH.NEW_PASS)}\n                        >New Pass</Button>\n                        <Button\n                            color=\"inherit\"\n                            className={classes.menuItem}\n                            onClick={() => history.push(PATH.TEST_PAGE)}\n                        >Test Page</Button>\n\n                        {/*------------------ add PACK and CARDS in to header -------------- */}\n                        <Button\n                            color=\"inherit\"\n                            className={classes.menuItem}\n                            onClick={() => history.push(PATH.PACK)}\n                        >Packs</Button>\n                        <Button\n                            color=\"inherit\"\n                            className={classes.menuItem}\n                            onClick={() => history.push(PATH.CARDS)}\n                        >Cards</Button>\n\n                       {/* -------------------------------------------------------------   */}\n\n                    </div>\n                    {/*<List\n                        component=\"nav\"\n                        aria-label=\"main mailbox folders\"\n                        className={classes.listBlock}\n                    >\n                        <ListItem button>\n                            <ListItemIcon className={classes.iconBlock}>\n                                <CardsIcon size={\"40\"}/>\n                            </ListItemIcon>\n                            <ListItemText primary=\"Inbox\" />\n                        </ListItem>\n                        <ListItem button>\n                            <ListItemIcon>\n                                <ProfileIcon size={\"25\"}/>\n                            </ListItemIcon>\n                            <ListItemText primary=\"Drafts\" />\n                        </ListItem>\n                    </List>*/}\n                </Toolbar>\n                {appStatus === 'loading' && <LinearProgress color={\"secondary\"}/>}\n            </AppBar>\n            {/*<nav className={s.menu}>\n                <div className={s.content}>\n                    <NavLink\n                        to={PATH.LOGIN}\n                        className={s.item}\n                    >Login</NavLink>\n                    <NavLink\n                        to={PATH.SIGNUP}\n                        className={s.item}\n                    >Sign up</NavLink>\n                    <NavLink\n                        to={PATH.PROFILE}\n                        className={s.item}\n                    >Profile</NavLink>\n                    <NavLink\n                        to={PATH.RESTORE_PASS}\n                        className={s.item}\n                    >Restore Pass</NavLink>\n                    <NavLink\n                        to={PATH.NEW_PASS}\n                        className={s.item}\n                    >New Pass</NavLink>\n                    <NavLink\n                        to={PATH.TEST_PAGE}\n                        className={s.item}\n                    >Test Page</NavLink>\n                    <div className={s.item + ' ' + s.waffel}>menu</div>\n                </div>\n            </nav>*/}\n        </div>\n    )\n}\n\nexport default Header\n","import React from 'react'\nimport Snackbar from '@material-ui/core/Snackbar';\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert';\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppStoreType} from \"../../m2-bll/redux/store\";\nimport {setAppErrorAC} from \"../../m2-bll/redux/app-reducer\";\n\nfunction Alert(props: AlertProps) {\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />\n}\n\nexport function ErrorSnackbar() {\n\n    // const [open, setOpen] = React.useState(true)\n    const error = useSelector<AppStoreType, string | null >(state => state.app.error)\n   const dispatch = useDispatch()\n\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\n        if (reason === 'clickaway') {\n            return\n        }\n      dispatch(setAppErrorAC(null))\n    }\n\n    const isOpen = error !== null;\n\n    return (\n        <Snackbar open={isOpen} autoHideDuration={6000} onClose={handleClose}>\n            <Alert onClose={handleClose} severity=\"error\">\n                {error}\n            </Alert>\n        </Snackbar>\n    )\n}\n","import React from 'react';\nimport './App.css';\nimport Routes from './m1-ui/Routes';\nimport Header from \"./m1-ui/Header/Header\";\nimport {ErrorSnackbar} from \"./m1-ui/ErrorSnackbar/ErrorSnackbar\";\n\n\nfunction App() {\n    console.log('Render App')\n    return (\n        <div className=\"App\">\n            <ErrorSnackbar/>\n            <Header/>\n            <Routes/>\n            {/*commit from github.com page interface*/}\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {combineReducers, createStore, applyMiddleware} from \"redux\"\nimport thunkMiddleware from 'redux-thunk'\nimport {authReducer} from \"./auth-reducer\";\nimport {appReducer} from \"./app-reducer\";\nimport {packReducer} from \"./pack-reducer\";\nimport {cardReducer} from \"./card-reducer\";\n\n\n\nconst reducers = combineReducers({\n    auth: authReducer,\n    app : appReducer,\n    pack : packReducer,\n    card : cardReducer,\n});\n\nexport const store = createStore(reducers, applyMiddleware(thunkMiddleware));\nexport default store\n\nexport type AppStoreType = ReturnType<typeof reducers>\n\n// @ts-ignore\n// window.store = store; // for dev\n","import {createTheme} from \"@material-ui/core\";\n\nexport const muiTheme = createTheme({\n    overrides: {\n        MuiCssBaseline: {\n            '@global': {\n                body: {\n                    background: 'linear-gradient(to bottom, #EBE0E9 30%, #9A91C8 90%)',\n                    backgroundRepeat: \"no-repeat\",\n                    backgroundAttachment: \"fixed\",\n                },\n            },\n        },\n\n        MuiButton: {\n            root: {\n                fontSize: '16px',\n                color: \"#21268F\",\n                fontFamily: 'SF UI Display, sans-serif',\n                fontWeight: 500,\n                fontStyle: \"normal\",\n                lineHeight: \"19px\",\n                borderRadius: \"30px\",\n                textTransform: \"none\",\n                padding: \"8px 16px\",\n            },\n        },\n        MuiCard: {\n            root: {\n                borderRadius : \"8px\",\n                backgroundColor : \"#F9F9FE\",\n            }\n        },\n        MuiLink: {\n            root : {\n                fontSize: '16px',\n                color: \"#21268F\",\n                fontFamily: 'SF UI Display, sans-serif',\n                fontWeight: 600,\n                fontStyle: \"normal\",\n                lineHeight: \"24px\",\n                borderRadius: \"30px\",\n            }\n        },\n        MuiTextField : {\n            root : {\n                fontWeight: 600,\n                fontFamily: 'SF UI Display, sans-serif',\n                fontStyle: \"normal\",\n                fontSize: \"16px\",\n                lineHeight: \"24px\",\n                color: \"#2D2E46\",\n            }\n        },\n        MuiInput : {\n            root : {\n                fontWeight: 300,\n                fontFamily: 'SF UI Display, sans-serif',\n                fontStyle: \"normal\",\n                fontSize: \"16px\",\n                lineHeight: \"24px\",\n                color: \"#2D2E46\",\n            }\n        }\n    },\n\n    typography: {\n        // Use the system font instead of the default Roboto font.\n        h1: {\n            fontWeight: 600,\n            fontStyle: \"normal\",\n            fontSize: \"26px\",\n            lineHeight: \"39px\",\n            fontFamily: \"Poppins\",\n            color: \"#2D2E46\",\n        },\n        h2: {\n            fontWeight: 600,\n            fontStyle: \"normal\",\n            fontSize: \"22px\",\n            lineHeight: \"33px\",\n            fontFamily: \"Poppins\",\n            color: \"#2D2E46\",\n        },\n        h3: {\n            fontWeight: 600,\n            fontStyle: \"normal\",\n            fontSize: \"16px\",\n            lineHeight: \"19px\",\n            fontFamily: 'SF UI Display, sans-serif',\n            color: \"#2D2E46\",\n        },\n        body1: {\n            fontWeight: 300,\n            fontStyle: \"normal\",\n            fontSize: \"16px\",\n            lineHeight: \"24px\",\n            fontFamily: 'SF UI Display, sans-serif',\n            color: \"#2D2E46\",\n            opacity: 0.6,\n        },\n        fontFamily: [\n            'Poppins',\n            'SF UI Display, sans-serif',\n            'Roboto',\n            '\"Helvetica Neue\"',\n            'Arial',\n            'sans-serif',\n        ].join(','),\n    },\n    palette: {\n        primary: {\n            light: '#b8f04a',\n            main: '#21268F',\n            dark: '#2D2E46'\n        },\n        secondary: {\n            light: '#e35ba2',\n            main: '#21268F',\n            dark: '#21268F'\n        },\n        error: {\n            main: '#ae2573',\n        },\n        warning: {\n            main: '#ffa500'\n        },\n        info: {\n            main: '#009cde',\n        },\n        text: {\n            primary: '#666666',\n            secondary: '#b3b3b3',\n        },\n    },\n\n});\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './n1-main/App';\nimport reportWebVitals from './reportWebVitals';\nimport {BrowserRouter, HashRouter} from \"react-router-dom\";\nimport {Provider} from \"react-redux\";\nimport store from './n1-main/m2-bll/redux/store';\nimport {CssBaseline, MuiThemeProvider} from '@material-ui/core';\nimport {muiTheme} from \"./n1-main/m1-ui/common/theme\";\n\nReactDOM.render(\n  <React.StrictMode>\n      <MuiThemeProvider theme={muiTheme}>\n          <CssBaseline/>\n          <Provider store={store}>\n              <HashRouter>\n              {/*<BrowserRouter>*/}\n                  <App />\n              {/*</BrowserRouter>*/}\n              </HashRouter>\n          </Provider>\n      </MuiThemeProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}